// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddView implements addView operation.
	//
	// Add table view in View repositories.
	//
	// POST /config/views
	AddView(ctx context.Context, params AddViewParams) (AddViewRes, error)
	// BatchParameterQuery implements batchParameterQuery operation.
	//
	// Call a SQL query batch command posted in query.
	//
	// GET /rest/batch/{table}/{query}
	BatchParameterQuery(ctx context.Context, params BatchParameterQueryParams) (BatchParameterQueryRes, error)
	// BatchQuery implements batchQuery operation.
	//
	// Call a SQL query batch command using insert or update data in body.
	//
	// POST /rest/batch/{table}
	BatchQuery(ctx context.Context, req BatchQueryReq, params BatchQueryParams) (BatchQueryRes, error)
	// BatchSelect implements batchSelect operation.
	//
	// Call a SQL query batch command store in batch database table with name.
	//
	// GET /rest/batch/{table}
	BatchSelect(ctx context.Context, params BatchSelectParams) (BatchSelectRes, error)
	// BrowseList implements browseList operation.
	//
	// Retrieves a list of Browseable locations.
	//
	// GET /rest/file/browse
	BrowseList(ctx context.Context) (BrowseListRes, error)
	// BrowseLocation implements browseLocation operation.
	//
	// Retrieves a list of files in the defined location.
	//
	// GET /rest/file/browse/{path}
	BrowseLocation(ctx context.Context, params BrowseLocationParams) (BrowseLocationRes, error)
	// CallExtend implements callExtend operation.
	//
	// Call extend plugin, own implementation plugin.
	//
	// GET /rest/extend/{path}
	CallExtend(ctx context.Context, params CallExtendParams) (CallExtendRes, error)
	// CallPostExtend implements callPostExtend operation.
	//
	// Post extend/plugin.
	//
	// POST /rest/extend/{path}
	CallPostExtend(ctx context.Context, req *CallPostExtendReq, params CallPostExtendParams) (CallPostExtendRes, error)
	// CreateDirectory implements createDirectory operation.
	//
	// Create a new directory.
	//
	// PUT /rest/file/{path}
	CreateDirectory(ctx context.Context, params CreateDirectoryParams) (CreateDirectoryRes, error)
	// DeleteExtend implements deleteExtend operation.
	//
	// Delete extend/plugin data.
	//
	// DELETE /rest/extend/{path}
	DeleteExtend(ctx context.Context, params DeleteExtendParams) (DeleteExtendRes, error)
	// DeleteFileLocation implements deleteFileLocation operation.
	//
	// Delete the file on the given location.
	//
	// DELETE /rest/file/{path}
	DeleteFileLocation(ctx context.Context, params DeleteFileLocationParams) (DeleteFileLocationRes, error)
	// DeleteJobResult implements deleteJobResult operation.
	//
	// Delete a specific job result.
	//
	// DELETE /tasks/{jobName}/{jobId}
	DeleteJobResult(ctx context.Context, params DeleteJobResultParams) (DeleteJobResultRes, error)
	// DeleteRecordsSearched implements deleteRecordsSearched operation.
	//
	// Delete a record with a given search.
	//
	// DELETE /rest/view/{table}/{search}
	DeleteRecordsSearched(ctx context.Context, params DeleteRecordsSearchedParams) (DeleteRecordsSearchedRes, error)
	// DeleteView implements deleteView operation.
	//
	// Delete/disable table view in configuration.
	//
	// DELETE /config/views
	DeleteView(ctx context.Context, params DeleteViewParams) (DeleteViewRes, error)
	// DownloadFile implements downloadFile operation.
	//
	// Download a file out of file location.
	//
	// GET /rest/file/{path}
	DownloadFile(ctx context.Context, params DownloadFileParams) (DownloadFileRes, error)
	// GetConfig implements getConfig operation.
	//
	// Get current active configuration.
	//
	// GET /config
	GetConfig(ctx context.Context) (GetConfigRes, error)
	// GetDatabases implements getDatabases operation.
	//
	// Retrieves a list of databases known by server.
	//
	// GET /rest/database
	GetDatabases(ctx context.Context) (GetDatabasesRes, error)
	// GetFields implements getFields operation.
	//
	// Retrieves all fields of an file.
	//
	// GET /rest/tables/{table}/fields
	GetFields(ctx context.Context, params GetFieldsParams) (GetFieldsRes, error)
	// GetImage implements getImage operation.
	//
	// Retrieves a field of a specific table record of a Map definition.
	//
	// GET /image/{table}/{field}/{search}
	GetImage(ctx context.Context, params GetImageParams) (GetImageRes, error)
	// GetJobExecutionResult implements getJobExecutionResult operation.
	//
	// Retrieves a specific job result.
	//
	// GET /tasks/results
	GetJobExecutionResult(ctx context.Context, params GetJobExecutionResultParams) (GetJobExecutionResultRes, error)
	// GetJobFullInfo implements getJobFullInfo operation.
	//
	// Retrieves a full job definition.
	//
	// GET /tasks/{jobName}
	GetJobFullInfo(ctx context.Context, params GetJobFullInfoParams) (GetJobFullInfoRes, error)
	// GetJobResult implements getJobResult operation.
	//
	// Delete a specific job result.
	//
	// GET /tasks/{jobName}/{jobId}
	GetJobResult(ctx context.Context, params GetJobResultParams) (GetJobResultRes, error)
	// GetJobs implements getJobs operation.
	//
	// Retrieves a list of jobs known by the Interface.
	//
	// GET /tasks
	GetJobs(ctx context.Context, params GetJobsParams) (GetJobsRes, error)
	// GetJobsConfig implements getJobsConfig operation.
	//
	// Read job configuration section.
	//
	// GET /config/jobs
	GetJobsConfig(ctx context.Context) (GetJobsConfigRes, error)
	// GetLobByMap implements getLobByMap operation.
	//
	// Retrieves a lob of a specific table record of an field in a Map.
	//
	// GET /binary/{table}/{field}/{search}
	GetLobByMap(ctx context.Context, params GetLobByMapParams) (GetLobByMapRes, error)
	// GetLoginSession implements getLoginSession operation.
	//
	// Login using baseauth or bearer to receive or validate token.
	//
	// GET /login
	GetLoginSession(ctx context.Context) (GetLoginSessionRes, error)
	// GetMapMetadata implements getMapMetadata operation.
	//
	// Retrieves metadata of a Map definition.
	//
	// GET /rest/metadata/view/{table}
	GetMapMetadata(ctx context.Context, params GetMapMetadataParams) (GetMapMetadataRes, error)
	// GetMapRecordsFields implements getMapRecordsFields operation.
	//
	// Retrieves a field of a specific table record of a Map definition.
	//
	// GET /rest/view/{table}/{fields}/{search}
	GetMapRecordsFields(ctx context.Context, params GetMapRecordsFieldsParams) (GetMapRecordsFieldsRes, error)
	// GetMaps implements getMaps operation.
	//
	// Retrieves a list of available views.
	//
	// GET /rest/view
	GetMaps(ctx context.Context) (GetMapsRes, error)
	// GetUserInfo implements getUserInfo operation.
	//
	// Get the token user information.
	//
	// GET /rest/user
	GetUserInfo(ctx context.Context) (GetUserInfoRes, error)
	// GetVersion implements getVersion operation.
	//
	// Get the current server version.
	//
	// GET /version
	GetVersion(ctx context.Context) (GetVersionRes, error)
	// GetVideo implements getVideo operation.
	//
	// Retrieves a video stream of a specific table record of a Map definition.
	//
	// GET /video/{table}/{field}/{search}
	GetVideo(ctx context.Context, params GetVideoParams) (GetVideoRes, error)
	// GetViews implements getViews operation.
	//
	// Get the available table views of all databases.
	//
	// GET /config/views
	GetViews(ctx context.Context) (GetViewsRes, error)
	// InsertMapFileRecords implements insertMapFileRecords operation.
	//
	// Store send records into Map definition.
	//
	// POST /rest/view
	InsertMapFileRecords(ctx context.Context, req OptInsertMapFileRecordsReq) (InsertMapFileRecordsRes, error)
	// InsertRecord implements insertRecord operation.
	//
	// Insert given record.
	//
	// POST /rest/view/{table}
	InsertRecord(ctx context.Context, req OptInsertRecordReq, params InsertRecordParams) (InsertRecordRes, error)
	// ListModelling implements listModelling operation.
	//
	// Retrieves all tables, views or data representation objects.
	//
	// GET /rest/map
	ListModelling(ctx context.Context) (ListModellingRes, error)
	// ListTables implements listTables operation.
	//
	// Retrieves all tables of databases.
	//
	// GET /rest/tables
	ListTables(ctx context.Context) (ListTablesRes, error)
	// LoginSession implements loginSession operation.
	//
	// Login using baseauth or bearer to receive or validate token.
	//
	// PUT /login
	LoginSession(ctx context.Context) (LoginSessionRes, error)
	// LogoutSessionCompat implements logoutSessionCompat operation.
	//
	// Invalidate given token session.
	//
	// PUT /logout
	LogoutSessionCompat(ctx context.Context) (LogoutSessionCompatRes, error)
	// PostDatabase implements postDatabase operation.
	//
	// Create a new database, the input need to be JSON. A structure level parameter indicate version to
	// be used.
	//
	// POST /rest/database
	PostDatabase(ctx context.Context, req *Database) (PostDatabaseRes, error)
	// PostJob implements postJob operation.
	//
	// Create a new Job database.
	//
	// POST /tasks
	PostJob(ctx context.Context, req PostJobReq) (PostJobRes, error)
	// PushLoginSession implements pushLoginSession operation.
	//
	// Login using baseauth or bearer to receive or validate token.
	//
	// POST /login
	PushLoginSession(ctx context.Context) (PushLoginSessionRes, error)
	// RemoveSessionCompat implements removeSessionCompat operation.
	//
	// Invalidate given token session.
	//
	// GET /logoff
	RemoveSessionCompat(ctx context.Context) (RemoveSessionCompatRes, error)
	// SearchModelling implements searchModelling operation.
	//
	// Retrieves all columns, fields of a tables, views or data representation.
	//
	// GET /rest/map/{path}
	SearchModelling(ctx context.Context, params SearchModellingParams) (SearchModellingRes, error)
	// SearchRecordsFields implements searchRecordsFields operation.
	//
	// Query a record with a given SQL query.
	//
	// GET /rest/view/{table}/{search}
	SearchRecordsFields(ctx context.Context, params SearchRecordsFieldsParams) (SearchRecordsFieldsRes, error)
	// SearchTable implements searchTable operation.
	//
	// Retrieves all fields of an file.
	//
	// GET /rest/tables/{table}/{fields}/{search}
	SearchTable(ctx context.Context, params SearchTableParams) (SearchTableRes, error)
	// SetConfig implements setConfig operation.
	//
	// Update current configuration and test.
	//
	// PUT /config
	SetConfig(ctx context.Context, req SetConfigReq) (SetConfigRes, error)
	// SetJobsConfig implements setJobsConfig operation.
	//
	// Set the Job configuration database.
	//
	// PUT /config/jobs
	SetJobsConfig(ctx context.Context, req OptJobStore) (SetJobsConfigRes, error)
	// ShutdownServer implements shutdownServer operation.
	//
	// Trigger shutdown of server instance.
	//
	// PUT /rest/shutdown/{hash}
	ShutdownServer(ctx context.Context, params ShutdownServerParams) (ShutdownServerRes, error)
	// StoreConfig implements storeConfig operation.
	//
	// Store current active configuration to configuration file.
	//
	// POST /config
	StoreConfig(ctx context.Context) (StoreConfigRes, error)
	// TriggerExtend implements triggerExtend operation.
	//
	// Put extend/plugin request.
	//
	// PUT /rest/extend/{path}
	TriggerExtend(ctx context.Context, params TriggerExtendParams) (TriggerExtendRes, error)
	// TriggerJob implements triggerJob operation.
	//
	// Trigger a job.
	//
	// PUT /tasks/{jobName}
	TriggerJob(ctx context.Context, params TriggerJobParams) (TriggerJobRes, error)
	// UpdateLobByMap implements updateLobByMap operation.
	//
	// Set a lob at a specific table record of an field in a Map.
	//
	// PUT /binary/{table}/{field}/{search}
	UpdateLobByMap(ctx context.Context, req UpdateLobByMapReq, params UpdateLobByMapParams) (UpdateLobByMapRes, error)
	// UpdateRecordsByFields implements updateRecordsByFields operation.
	//
	// Update a record dependent on field(s) of a specific table.
	//
	// PUT /rest/view/{table}/{search}
	UpdateRecordsByFields(ctx context.Context, req OptUpdateRecordsByFieldsReq, params UpdateRecordsByFieldsParams) (UpdateRecordsByFieldsRes, error)
	// UploadFile implements uploadFile operation.
	//
	// Upload a new file to the given location.
	//
	// POST /rest/file/{path}
	UploadFile(ctx context.Context, req *UploadFileReq, params UploadFileParams) (UploadFileRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
