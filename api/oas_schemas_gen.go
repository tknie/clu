// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/APIHandler
type APIHandler struct {
	Name    OptString `json:"Name"`
	Version OptString `json:"Version"`
}

// GetName returns the value of Name.
func (s *APIHandler) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *APIHandler) GetVersion() OptString {
	return s.Version
}

// SetName sets the value of Name.
func (s *APIHandler) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *APIHandler) SetVersion(val OptString) {
	s.Version = val
}

type AccessBadRequest Error

func (*AccessBadRequest) accessRes() {}

// AccessForbidden is response for Access operation.
type AccessForbidden struct{}

func (*AccessForbidden) accessRes() {}

type AccessNotFound Error

func (*AccessNotFound) accessRes() {}

type AccessRole string

const (
	AccessRole_User          AccessRole = "User"
	AccessRole_user          AccessRole = "user"
	AccessRole_USER          AccessRole = "USER"
	AccessRole_Administrator AccessRole = "Administrator"
	AccessRole_administrator AccessRole = "administrator"
	AccessRole_ADMINISTRATOR AccessRole = "ADMINISTRATOR"
)

// AllValues returns all AccessRole values.
func (AccessRole) AllValues() []AccessRole {
	return []AccessRole{
		AccessRole_User,
		AccessRole_user,
		AccessRole_USER,
		AccessRole_Administrator,
		AccessRole_administrator,
		AccessRole_ADMINISTRATOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccessRole) MarshalText() ([]byte, error) {
	switch s {
	case AccessRole_User:
		return []byte(s), nil
	case AccessRole_user:
		return []byte(s), nil
	case AccessRole_USER:
		return []byte(s), nil
	case AccessRole_Administrator:
		return []byte(s), nil
	case AccessRole_administrator:
		return []byte(s), nil
	case AccessRole_ADMINISTRATOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccessRole) UnmarshalText(data []byte) error {
	switch AccessRole(data) {
	case AccessRole_User:
		*s = AccessRole_User
		return nil
	case AccessRole_user:
		*s = AccessRole_user
		return nil
	case AccessRole_USER:
		*s = AccessRole_USER
		return nil
	case AccessRole_Administrator:
		*s = AccessRole_Administrator
		return nil
	case AccessRole_administrator:
		*s = AccessRole_administrator
		return nil
	case AccessRole_ADMINISTRATOR:
		*s = AccessRole_ADMINISTRATOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AccessUnauthorized is response for Access operation.
type AccessUnauthorized struct{}

func (*AccessUnauthorized) accessRes() {}

// Ref: #/components/schemas/ActivityStats
type ActivityStats struct {
	Statistics OptActivityStatsStatistics `json:"Statistics"`
}

// GetStatistics returns the value of Statistics.
func (s *ActivityStats) GetStatistics() OptActivityStatsStatistics {
	return s.Statistics
}

// SetStatistics sets the value of Statistics.
func (s *ActivityStats) SetStatistics(val OptActivityStatsStatistics) {
	s.Statistics = val
}

func (*ActivityStats) getDatabaseStatsRes() {}

type ActivityStatsStatistics struct {
	BPHitRate OptFloat64 `json:"BPHitRate"`
}

// GetBPHitRate returns the value of BPHitRate.
func (s *ActivityStatsStatistics) GetBPHitRate() OptFloat64 {
	return s.BPHitRate
}

// SetBPHitRate sets the value of BPHitRate.
func (s *ActivityStatsStatistics) SetBPHitRate(val OptFloat64) {
	s.BPHitRate = val
}

// AdaptPermissionForbidden is response for AdaptPermission operation.
type AdaptPermissionForbidden struct{}

func (*AdaptPermissionForbidden) adaptPermissionRes() {}

// AdaptPermissionUnauthorized is response for AdaptPermission operation.
type AdaptPermissionUnauthorized struct{}

func (*AdaptPermissionUnauthorized) adaptPermissionRes() {}

type AddAccessBadRequest Error

func (*AddAccessBadRequest) addAccessRes() {}

// AddAccessForbidden is response for AddAccess operation.
type AddAccessForbidden struct{}

func (*AddAccessForbidden) addAccessRes() {}

type AddAccessNotFound Error

func (*AddAccessNotFound) addAccessRes() {}

// AddAccessOK is response for AddAccess operation.
type AddAccessOK struct{}

func (*AddAccessOK) addAccessRes() {}

type AddAccessRole string

const (
	AddAccessRole_User          AddAccessRole = "User"
	AddAccessRole_user          AddAccessRole = "user"
	AddAccessRole_USER          AddAccessRole = "USER"
	AddAccessRole_Administrator AddAccessRole = "Administrator"
	AddAccessRole_administrator AddAccessRole = "administrator"
	AddAccessRole_ADMINISTRATOR AddAccessRole = "ADMINISTRATOR"
)

// AllValues returns all AddAccessRole values.
func (AddAccessRole) AllValues() []AddAccessRole {
	return []AddAccessRole{
		AddAccessRole_User,
		AddAccessRole_user,
		AddAccessRole_USER,
		AddAccessRole_Administrator,
		AddAccessRole_administrator,
		AddAccessRole_ADMINISTRATOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddAccessRole) MarshalText() ([]byte, error) {
	switch s {
	case AddAccessRole_User:
		return []byte(s), nil
	case AddAccessRole_user:
		return []byte(s), nil
	case AddAccessRole_USER:
		return []byte(s), nil
	case AddAccessRole_Administrator:
		return []byte(s), nil
	case AddAccessRole_administrator:
		return []byte(s), nil
	case AddAccessRole_ADMINISTRATOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddAccessRole) UnmarshalText(data []byte) error {
	switch AddAccessRole(data) {
	case AddAccessRole_User:
		*s = AddAccessRole_User
		return nil
	case AddAccessRole_user:
		*s = AddAccessRole_user
		return nil
	case AddAccessRole_USER:
		*s = AddAccessRole_USER
		return nil
	case AddAccessRole_Administrator:
		*s = AddAccessRole_Administrator
		return nil
	case AddAccessRole_administrator:
		*s = AddAccessRole_administrator
		return nil
	case AddAccessRole_ADMINISTRATOR:
		*s = AddAccessRole_ADMINISTRATOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AddAccessUnauthorized is response for AddAccess operation.
type AddAccessUnauthorized struct{}

func (*AddAccessUnauthorized) addAccessRes() {}

// AddRBACResourceForbidden is response for AddRBACResource operation.
type AddRBACResourceForbidden struct{}

func (*AddRBACResourceForbidden) addRBACResourceRes() {}

type AddRBACResourceResource string

const (
	AddRBACResourceResource_Role      AddRBACResourceResource = "Role"
	AddRBACResourceResource_role      AddRBACResourceResource = "role"
	AddRBACResourceResource_ROLE      AddRBACResourceResource = "ROLE"
	AddRBACResourceResource_Object    AddRBACResourceResource = "Object"
	AddRBACResourceResource_object    AddRBACResourceResource = "object"
	AddRBACResourceResource_OBJECT    AddRBACResourceResource = "OBJECT"
	AddRBACResourceResource_User      AddRBACResourceResource = "User"
	AddRBACResourceResource_user      AddRBACResourceResource = "user"
	AddRBACResourceResource_USER      AddRBACResourceResource = "USER"
	AddRBACResourceResource_Operation AddRBACResourceResource = "Operation"
	AddRBACResourceResource_operation AddRBACResourceResource = "operation"
	AddRBACResourceResource_OPERATION AddRBACResourceResource = "OPERATION"
)

// AllValues returns all AddRBACResourceResource values.
func (AddRBACResourceResource) AllValues() []AddRBACResourceResource {
	return []AddRBACResourceResource{
		AddRBACResourceResource_Role,
		AddRBACResourceResource_role,
		AddRBACResourceResource_ROLE,
		AddRBACResourceResource_Object,
		AddRBACResourceResource_object,
		AddRBACResourceResource_OBJECT,
		AddRBACResourceResource_User,
		AddRBACResourceResource_user,
		AddRBACResourceResource_USER,
		AddRBACResourceResource_Operation,
		AddRBACResourceResource_operation,
		AddRBACResourceResource_OPERATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddRBACResourceResource) MarshalText() ([]byte, error) {
	switch s {
	case AddRBACResourceResource_Role:
		return []byte(s), nil
	case AddRBACResourceResource_role:
		return []byte(s), nil
	case AddRBACResourceResource_ROLE:
		return []byte(s), nil
	case AddRBACResourceResource_Object:
		return []byte(s), nil
	case AddRBACResourceResource_object:
		return []byte(s), nil
	case AddRBACResourceResource_OBJECT:
		return []byte(s), nil
	case AddRBACResourceResource_User:
		return []byte(s), nil
	case AddRBACResourceResource_user:
		return []byte(s), nil
	case AddRBACResourceResource_USER:
		return []byte(s), nil
	case AddRBACResourceResource_Operation:
		return []byte(s), nil
	case AddRBACResourceResource_operation:
		return []byte(s), nil
	case AddRBACResourceResource_OPERATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddRBACResourceResource) UnmarshalText(data []byte) error {
	switch AddRBACResourceResource(data) {
	case AddRBACResourceResource_Role:
		*s = AddRBACResourceResource_Role
		return nil
	case AddRBACResourceResource_role:
		*s = AddRBACResourceResource_role
		return nil
	case AddRBACResourceResource_ROLE:
		*s = AddRBACResourceResource_ROLE
		return nil
	case AddRBACResourceResource_Object:
		*s = AddRBACResourceResource_Object
		return nil
	case AddRBACResourceResource_object:
		*s = AddRBACResourceResource_object
		return nil
	case AddRBACResourceResource_OBJECT:
		*s = AddRBACResourceResource_OBJECT
		return nil
	case AddRBACResourceResource_User:
		*s = AddRBACResourceResource_User
		return nil
	case AddRBACResourceResource_user:
		*s = AddRBACResourceResource_user
		return nil
	case AddRBACResourceResource_USER:
		*s = AddRBACResourceResource_USER
		return nil
	case AddRBACResourceResource_Operation:
		*s = AddRBACResourceResource_Operation
		return nil
	case AddRBACResourceResource_operation:
		*s = AddRBACResourceResource_operation
		return nil
	case AddRBACResourceResource_OPERATION:
		*s = AddRBACResourceResource_OPERATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AddRBACResourceUnauthorized is response for AddRBACResource operation.
type AddRBACResourceUnauthorized struct{}

func (*AddRBACResourceUnauthorized) addRBACResourceRes() {}

// AddViewForbidden is response for AddView operation.
type AddViewForbidden struct{}

func (*AddViewForbidden) addViewRes() {}

// AddViewOK is response for AddView operation.
type AddViewOK struct{}

func (*AddViewOK) addViewRes() {}

// AddViewUnauthorized is response for AddView operation.
type AddViewUnauthorized struct{}

func (*AddViewUnauthorized) addViewRes() {}

// Ref: #/components/schemas/AuthorizationToken
type AuthorizationToken struct {
	Token     OptString `json:"token"`
	AdminRole OptBool   `json:"AdminRole"`
	User      OptUser   `json:"User"`
}

// GetToken returns the value of Token.
func (s *AuthorizationToken) GetToken() OptString {
	return s.Token
}

// GetAdminRole returns the value of AdminRole.
func (s *AuthorizationToken) GetAdminRole() OptBool {
	return s.AdminRole
}

// GetUser returns the value of User.
func (s *AuthorizationToken) GetUser() OptUser {
	return s.User
}

// SetToken sets the value of Token.
func (s *AuthorizationToken) SetToken(val OptString) {
	s.Token = val
}

// SetAdminRole sets the value of AdminRole.
func (s *AuthorizationToken) SetAdminRole(val OptBool) {
	s.AdminRole = val
}

// SetUser sets the value of User.
func (s *AuthorizationToken) SetUser(val OptUser) {
	s.User = val
}

// AuthorizationTokenHeaders wraps AuthorizationToken with response headers.
type AuthorizationTokenHeaders struct {
	XToken   OptString
	Response AuthorizationToken
}

// GetXToken returns the value of XToken.
func (s *AuthorizationTokenHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *AuthorizationTokenHeaders) GetResponse() AuthorizationToken {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *AuthorizationTokenHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *AuthorizationTokenHeaders) SetResponse(val AuthorizationToken) {
	s.Response = val
}

func (*AuthorizationTokenHeaders) getLoginSessionRes()  {}
func (*AuthorizationTokenHeaders) loginSessionRes()     {}
func (*AuthorizationTokenHeaders) pushLoginSessionRes() {}

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// BatchParameterQueryForbidden is response for BatchParameterQuery operation.
type BatchParameterQueryForbidden struct{}

func (*BatchParameterQueryForbidden) batchParameterQueryRes() {}

// BatchParameterQueryUnauthorized is response for BatchParameterQuery operation.
type BatchParameterQueryUnauthorized struct{}

func (*BatchParameterQueryUnauthorized) batchParameterQueryRes() {}

// BatchQueryForbidden is response for BatchQuery operation.
type BatchQueryForbidden struct{}

func (*BatchQueryForbidden) batchQueryRes() {}

type BatchQueryReqEmptyBody struct{}

func (*BatchQueryReqEmptyBody) batchQueryReq() {}

type BatchQueryReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s BatchQueryReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*BatchQueryReqTextPlain) batchQueryReq() {}

// BatchQueryUnauthorized is response for BatchQuery operation.
type BatchQueryUnauthorized struct{}

func (*BatchQueryUnauthorized) batchQueryRes() {}

// BatchSelectForbidden is response for BatchSelect operation.
type BatchSelectForbidden struct{}

func (*BatchSelectForbidden) batchSelectRes() {}

// BatchSelectUnauthorized is response for BatchSelect operation.
type BatchSelectUnauthorized struct{}

func (*BatchSelectUnauthorized) batchSelectRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type BrowseListBadRequest Error

func (*BrowseListBadRequest) browseListRes() {}

// BrowseListForbidden is response for BrowseList operation.
type BrowseListForbidden struct{}

func (*BrowseListForbidden) browseListRes() {}

type BrowseListNotFound Error

func (*BrowseListNotFound) browseListRes() {}

// BrowseListUnauthorized is response for BrowseList operation.
type BrowseListUnauthorized struct{}

func (*BrowseListUnauthorized) browseListRes() {}

type BrowseLocationBadRequest Error

func (*BrowseLocationBadRequest) browseLocationRes() {}

// BrowseLocationForbidden is response for BrowseLocation operation.
type BrowseLocationForbidden struct{}

func (*BrowseLocationForbidden) browseLocationRes() {}

type BrowseLocationNotFound Error

func (*BrowseLocationNotFound) browseLocationRes() {}

type BrowseLocationOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s BrowseLocationOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*BrowseLocationOKApplicationOctetStream) browseLocationRes() {}

type BrowseLocationOKMultipartFormData struct {
	File ht.MultipartFile `json:"file"`
}

func (*BrowseLocationOKMultipartFormData) browseLocationRes() {}

// GetFile returns the value of File.
func (s *BrowseLocationOKMultipartFormData) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *BrowseLocationOKMultipartFormData) SetFile(val ht.MultipartFile) {
	s.File = val
}

// BrowseLocationUnauthorized is response for BrowseLocation operation.
type BrowseLocationUnauthorized struct{}

func (*BrowseLocationUnauthorized) browseLocationRes() {}

type CallExtendBadRequest Error

func (*CallExtendBadRequest) callExtendRes() {}

// CallExtendForbidden is response for CallExtend operation.
type CallExtendForbidden struct{}

func (*CallExtendForbidden) callExtendRes() {}

type CallExtendNotFound Error

func (*CallExtendNotFound) callExtendRes() {}

type CallExtendOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CallExtendOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CallExtendOK) callExtendRes() {}

// CallExtendUnauthorized is response for CallExtend operation.
type CallExtendUnauthorized struct{}

func (*CallExtendUnauthorized) callExtendRes() {}

type CallPostExtendBadRequest Error

func (*CallPostExtendBadRequest) callPostExtendRes() {}

// CallPostExtendForbidden is response for CallPostExtend operation.
type CallPostExtendForbidden struct{}

func (*CallPostExtendForbidden) callPostExtendRes() {}

type CallPostExtendNotFound Error

func (*CallPostExtendNotFound) callPostExtendRes() {}

type CallPostExtendOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CallPostExtendOKTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CallPostExtendOKTextPlain) callPostExtendRes() {}

type CallPostExtendReq struct {
	// Upload data.
	UploadFile OptMultipartFile `json:"uploadFile"`
}

// GetUploadFile returns the value of UploadFile.
func (s *CallPostExtendReq) GetUploadFile() OptMultipartFile {
	return s.UploadFile
}

// SetUploadFile sets the value of UploadFile.
func (s *CallPostExtendReq) SetUploadFile(val OptMultipartFile) {
	s.UploadFile = val
}

// CallPostExtendUnauthorized is response for CallPostExtend operation.
type CallPostExtendUnauthorized struct{}

func (*CallPostExtendUnauthorized) callPostExtendRes() {}

// Ref: #/components/schemas/ClusterConfig
type ClusterConfig struct {
	Nodes []ClusterConfigNodesItem `json:"Nodes"`
}

// GetNodes returns the value of Nodes.
func (s *ClusterConfig) GetNodes() []ClusterConfigNodesItem {
	return s.Nodes
}

// SetNodes sets the value of Nodes.
func (s *ClusterConfig) SetNodes(val []ClusterConfigNodesItem) {
	s.Nodes = val
}

type ClusterConfigNodesItem struct {
	Name  OptString `json:"Name"`
	Web   OptString `json:"Web"`
	Group OptString `json:"Group"`
}

// GetName returns the value of Name.
func (s *ClusterConfigNodesItem) GetName() OptString {
	return s.Name
}

// GetWeb returns the value of Web.
func (s *ClusterConfigNodesItem) GetWeb() OptString {
	return s.Web
}

// GetGroup returns the value of Group.
func (s *ClusterConfigNodesItem) GetGroup() OptString {
	return s.Group
}

// SetName sets the value of Name.
func (s *ClusterConfigNodesItem) SetName(val OptString) {
	s.Name = val
}

// SetWeb sets the value of Web.
func (s *ClusterConfigNodesItem) SetWeb(val OptString) {
	s.Web = val
}

// SetGroup sets the value of Group.
func (s *ClusterConfigNodesItem) SetGroup(val OptString) {
	s.Group = val
}

// Ref: #/components/schemas/Config
type Config struct {
	StructureLevel OptInt                  `json:"StructureLevel"`
	Version        OptString               `json:"Version"`
	Server         OptConfigServer         `json:"Server"`
	JobStore       OptJobStore             `json:"JobStore"`
	Cluster        OptClusterConfig        `json:"Cluster"`
	Mapping        OptConfigMapping        `json:"Mapping"`
	DatabaseAccess OptConfigDatabaseAccess `json:"DatabaseAccess"`
	Module         OptConfigModule         `json:"Module"`
	Metrics        OptConfigMetrics        `json:"Metrics"`
}

// GetStructureLevel returns the value of StructureLevel.
func (s *Config) GetStructureLevel() OptInt {
	return s.StructureLevel
}

// GetVersion returns the value of Version.
func (s *Config) GetVersion() OptString {
	return s.Version
}

// GetServer returns the value of Server.
func (s *Config) GetServer() OptConfigServer {
	return s.Server
}

// GetJobStore returns the value of JobStore.
func (s *Config) GetJobStore() OptJobStore {
	return s.JobStore
}

// GetCluster returns the value of Cluster.
func (s *Config) GetCluster() OptClusterConfig {
	return s.Cluster
}

// GetMapping returns the value of Mapping.
func (s *Config) GetMapping() OptConfigMapping {
	return s.Mapping
}

// GetDatabaseAccess returns the value of DatabaseAccess.
func (s *Config) GetDatabaseAccess() OptConfigDatabaseAccess {
	return s.DatabaseAccess
}

// GetModule returns the value of Module.
func (s *Config) GetModule() OptConfigModule {
	return s.Module
}

// GetMetrics returns the value of Metrics.
func (s *Config) GetMetrics() OptConfigMetrics {
	return s.Metrics
}

// SetStructureLevel sets the value of StructureLevel.
func (s *Config) SetStructureLevel(val OptInt) {
	s.StructureLevel = val
}

// SetVersion sets the value of Version.
func (s *Config) SetVersion(val OptString) {
	s.Version = val
}

// SetServer sets the value of Server.
func (s *Config) SetServer(val OptConfigServer) {
	s.Server = val
}

// SetJobStore sets the value of JobStore.
func (s *Config) SetJobStore(val OptJobStore) {
	s.JobStore = val
}

// SetCluster sets the value of Cluster.
func (s *Config) SetCluster(val OptClusterConfig) {
	s.Cluster = val
}

// SetMapping sets the value of Mapping.
func (s *Config) SetMapping(val OptConfigMapping) {
	s.Mapping = val
}

// SetDatabaseAccess sets the value of DatabaseAccess.
func (s *Config) SetDatabaseAccess(val OptConfigDatabaseAccess) {
	s.DatabaseAccess = val
}

// SetModule sets the value of Module.
func (s *Config) SetModule(val OptConfigModule) {
	s.Module = val
}

// SetMetrics sets the value of Metrics.
func (s *Config) SetMetrics(val OptConfigMetrics) {
	s.Metrics = val
}

func (*Config) getConfigRes() {}
func (*Config) setConfigReq() {}

type ConfigDatabaseAccess struct {
	Global   OptBool          `json:"Global"`
	Database []DatabaseConfig `json:"Database"`
}

// GetGlobal returns the value of Global.
func (s *ConfigDatabaseAccess) GetGlobal() OptBool {
	return s.Global
}

// GetDatabase returns the value of Database.
func (s *ConfigDatabaseAccess) GetDatabase() []DatabaseConfig {
	return s.Database
}

// SetGlobal sets the value of Global.
func (s *ConfigDatabaseAccess) SetGlobal(val OptBool) {
	s.Global = val
}

// SetDatabase sets the value of Database.
func (s *ConfigDatabaseAccess) SetDatabase(val []DatabaseConfig) {
	s.Database = val
}

type ConfigMapping struct {
	Directory OptString        `json:"Directory"`
	Database  []DatabaseConfig `json:"Database"`
}

// GetDirectory returns the value of Directory.
func (s *ConfigMapping) GetDirectory() OptString {
	return s.Directory
}

// GetDatabase returns the value of Database.
func (s *ConfigMapping) GetDatabase() []DatabaseConfig {
	return s.Database
}

// SetDirectory sets the value of Directory.
func (s *ConfigMapping) SetDirectory(val OptString) {
	s.Directory = val
}

// SetDatabase sets the value of Database.
func (s *ConfigMapping) SetDatabase(val []DatabaseConfig) {
	s.Database = val
}

type ConfigMetrics struct {
	Database []DatabaseConfig `json:"Database"`
}

// GetDatabase returns the value of Database.
func (s *ConfigMetrics) GetDatabase() []DatabaseConfig {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *ConfigMetrics) SetDatabase(val []DatabaseConfig) {
	s.Database = val
}

type ConfigModule struct {
	Data         OptString                      `json:"Data"`
	Installation []ConfigModuleInstallationItem `json:"Installation"`
	Directories  []ConfigModuleDirectoriesItem  `json:"Directories"`
}

// GetData returns the value of Data.
func (s *ConfigModule) GetData() OptString {
	return s.Data
}

// GetInstallation returns the value of Installation.
func (s *ConfigModule) GetInstallation() []ConfigModuleInstallationItem {
	return s.Installation
}

// GetDirectories returns the value of Directories.
func (s *ConfigModule) GetDirectories() []ConfigModuleDirectoriesItem {
	return s.Directories
}

// SetData sets the value of Data.
func (s *ConfigModule) SetData(val OptString) {
	s.Data = val
}

// SetInstallation sets the value of Installation.
func (s *ConfigModule) SetInstallation(val []ConfigModuleInstallationItem) {
	s.Installation = val
}

// SetDirectories sets the value of Directories.
func (s *ConfigModule) SetDirectories(val []ConfigModuleDirectoriesItem) {
	s.Directories = val
}

type ConfigModuleDirectoriesItem struct {
	Name     OptString `json:"name"`
	Location OptString `json:"location"`
}

// GetName returns the value of Name.
func (s *ConfigModuleDirectoriesItem) GetName() OptString {
	return s.Name
}

// GetLocation returns the value of Location.
func (s *ConfigModuleDirectoriesItem) GetLocation() OptString {
	return s.Location
}

// SetName sets the value of Name.
func (s *ConfigModuleDirectoriesItem) SetName(val OptString) {
	s.Name = val
}

// SetLocation sets the value of Location.
func (s *ConfigModuleDirectoriesItem) SetLocation(val OptString) {
	s.Location = val
}

type ConfigModuleInstallationItem struct {
	Location       OptString `json:"Location"`
	Version        OptString `json:"Version"`
	StructureLevel OptInt    `json:"StructureLevel"`
	Active         OptBool   `json:"Active"`
}

// GetLocation returns the value of Location.
func (s *ConfigModuleInstallationItem) GetLocation() OptString {
	return s.Location
}

// GetVersion returns the value of Version.
func (s *ConfigModuleInstallationItem) GetVersion() OptString {
	return s.Version
}

// GetStructureLevel returns the value of StructureLevel.
func (s *ConfigModuleInstallationItem) GetStructureLevel() OptInt {
	return s.StructureLevel
}

// GetActive returns the value of Active.
func (s *ConfigModuleInstallationItem) GetActive() OptBool {
	return s.Active
}

// SetLocation sets the value of Location.
func (s *ConfigModuleInstallationItem) SetLocation(val OptString) {
	s.Location = val
}

// SetVersion sets the value of Version.
func (s *ConfigModuleInstallationItem) SetVersion(val OptString) {
	s.Version = val
}

// SetStructureLevel sets the value of StructureLevel.
func (s *ConfigModuleInstallationItem) SetStructureLevel(val OptInt) {
	s.StructureLevel = val
}

// SetActive sets the value of Active.
func (s *ConfigModuleInstallationItem) SetActive(val OptBool) {
	s.Active = val
}

type ConfigServer struct {
	Service     []ConfigServerServiceItem  `json:"Service"`
	LogLocation OptConfigServerLogLocation `json:"LogLocation"`
	Content     OptString                  `json:"Content"`
}

// GetService returns the value of Service.
func (s *ConfigServer) GetService() []ConfigServerServiceItem {
	return s.Service
}

// GetLogLocation returns the value of LogLocation.
func (s *ConfigServer) GetLogLocation() OptConfigServerLogLocation {
	return s.LogLocation
}

// GetContent returns the value of Content.
func (s *ConfigServer) GetContent() OptString {
	return s.Content
}

// SetService sets the value of Service.
func (s *ConfigServer) SetService(val []ConfigServerServiceItem) {
	s.Service = val
}

// SetLogLocation sets the value of LogLocation.
func (s *ConfigServer) SetLogLocation(val OptConfigServerLogLocation) {
	s.LogLocation = val
}

// SetContent sets the value of Content.
func (s *ConfigServer) SetContent(val OptString) {
	s.Content = val
}

type ConfigServerLogLocation struct {
	Directory OptString `json:"directory"`
	Level     OptString `json:"level"`
}

// GetDirectory returns the value of Directory.
func (s *ConfigServerLogLocation) GetDirectory() OptString {
	return s.Directory
}

// GetLevel returns the value of Level.
func (s *ConfigServerLogLocation) GetLevel() OptString {
	return s.Level
}

// SetDirectory sets the value of Directory.
func (s *ConfigServerLogLocation) SetDirectory(val OptString) {
	s.Directory = val
}

// SetLevel sets the value of Level.
func (s *ConfigServerLogLocation) SetLevel(val OptString) {
	s.Level = val
}

type ConfigServerServiceItem struct {
	Port OptFloat64 `json:"port"`
	Type OptString  `json:"type"`
}

// GetPort returns the value of Port.
func (s *ConfigServerServiceItem) GetPort() OptFloat64 {
	return s.Port
}

// GetType returns the value of Type.
func (s *ConfigServerServiceItem) GetType() OptString {
	return s.Type
}

// SetPort sets the value of Port.
func (s *ConfigServerServiceItem) SetPort(val OptFloat64) {
	s.Port = val
}

// SetType sets the value of Type.
func (s *ConfigServerServiceItem) SetType(val OptString) {
	s.Type = val
}

type CreateDirectoryBadRequest Error

func (*CreateDirectoryBadRequest) createDirectoryRes() {}

// CreateDirectoryForbidden is response for CreateDirectory operation.
type CreateDirectoryForbidden struct{}

func (*CreateDirectoryForbidden) createDirectoryRes() {}

type CreateDirectoryNotFound Error

func (*CreateDirectoryNotFound) createDirectoryRes() {}

// CreateDirectoryUnauthorized is response for CreateDirectory operation.
type CreateDirectoryUnauthorized struct{}

func (*CreateDirectoryUnauthorized) createDirectoryRes() {}

// Ref: #/components/schemas/Database
type Database struct{}

// Ref: #/components/schemas/DatabaseConfig
type DatabaseConfig struct {
	URL     OptString  `json:"url"`
	File    OptFloat64 `json:"file"`
	Changed OptBool    `json:"changed"`
	Deleted OptBool    `json:"deleted"`
}

// GetURL returns the value of URL.
func (s *DatabaseConfig) GetURL() OptString {
	return s.URL
}

// GetFile returns the value of File.
func (s *DatabaseConfig) GetFile() OptFloat64 {
	return s.File
}

// GetChanged returns the value of Changed.
func (s *DatabaseConfig) GetChanged() OptBool {
	return s.Changed
}

// GetDeleted returns the value of Deleted.
func (s *DatabaseConfig) GetDeleted() OptBool {
	return s.Deleted
}

// SetURL sets the value of URL.
func (s *DatabaseConfig) SetURL(val OptString) {
	s.URL = val
}

// SetFile sets the value of File.
func (s *DatabaseConfig) SetFile(val OptFloat64) {
	s.File = val
}

// SetChanged sets the value of Changed.
func (s *DatabaseConfig) SetChanged(val OptBool) {
	s.Changed = val
}

// SetDeleted sets the value of Deleted.
func (s *DatabaseConfig) SetDeleted(val OptBool) {
	s.Deleted = val
}

// Ref: #/components/schemas/DatabaseInformation
type DatabaseInformation struct {
	Active         OptBool   `json:"Active"`
	Dbid           OptInt    `json:"Dbid"`
	Name           OptString `json:"Name"`
	ServiceVersion OptString `json:"ServiceVersion"`
	StructureLevel OptInt    `json:"StructureLevel"`
	Version        OptString `json:"Version"`
	Location       OptString `json:"Location"`
}

// GetActive returns the value of Active.
func (s *DatabaseInformation) GetActive() OptBool {
	return s.Active
}

// GetDbid returns the value of Dbid.
func (s *DatabaseInformation) GetDbid() OptInt {
	return s.Dbid
}

// GetName returns the value of Name.
func (s *DatabaseInformation) GetName() OptString {
	return s.Name
}

// GetServiceVersion returns the value of ServiceVersion.
func (s *DatabaseInformation) GetServiceVersion() OptString {
	return s.ServiceVersion
}

// GetStructureLevel returns the value of StructureLevel.
func (s *DatabaseInformation) GetStructureLevel() OptInt {
	return s.StructureLevel
}

// GetVersion returns the value of Version.
func (s *DatabaseInformation) GetVersion() OptString {
	return s.Version
}

// GetLocation returns the value of Location.
func (s *DatabaseInformation) GetLocation() OptString {
	return s.Location
}

// SetActive sets the value of Active.
func (s *DatabaseInformation) SetActive(val OptBool) {
	s.Active = val
}

// SetDbid sets the value of Dbid.
func (s *DatabaseInformation) SetDbid(val OptInt) {
	s.Dbid = val
}

// SetName sets the value of Name.
func (s *DatabaseInformation) SetName(val OptString) {
	s.Name = val
}

// SetServiceVersion sets the value of ServiceVersion.
func (s *DatabaseInformation) SetServiceVersion(val OptString) {
	s.ServiceVersion = val
}

// SetStructureLevel sets the value of StructureLevel.
func (s *DatabaseInformation) SetStructureLevel(val OptInt) {
	s.StructureLevel = val
}

// SetVersion sets the value of Version.
func (s *DatabaseInformation) SetVersion(val OptString) {
	s.Version = val
}

// SetLocation sets the value of Location.
func (s *DatabaseInformation) SetLocation(val OptString) {
	s.Location = val
}

// DatabaseOperationForbidden is response for DatabaseOperation operation.
type DatabaseOperationForbidden struct{}

func (*DatabaseOperationForbidden) databaseOperationRes() {}

// DatabaseOperationUnauthorized is response for DatabaseOperation operation.
type DatabaseOperationUnauthorized struct{}

func (*DatabaseOperationUnauthorized) databaseOperationRes() {}

// DatabasePostOperationsForbidden is response for DatabasePostOperations operation.
type DatabasePostOperationsForbidden struct{}

func (*DatabasePostOperationsForbidden) databasePostOperationsRes() {}

// DatabasePostOperationsUnauthorized is response for DatabasePostOperations operation.
type DatabasePostOperationsUnauthorized struct{}

func (*DatabasePostOperationsUnauthorized) databasePostOperationsRes() {}

// Ref: #/components/schemas/DatabaseStatus
type DatabaseStatus struct {
	Database OptDatabaseStatusDatabase `json:"Database"`
}

// GetDatabase returns the value of Database.
func (s *DatabaseStatus) GetDatabase() OptDatabaseStatusDatabase {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *DatabaseStatus) SetDatabase(val OptDatabaseStatusDatabase) {
	s.Database = val
}

func (*DatabaseStatus) databaseOperationRes()      {}
func (*DatabaseStatus) databasePostOperationsRes() {}
func (*DatabaseStatus) putDatabaseResourceRes()    {}

type DatabaseStatusDatabase struct {
	Dbid   OptString `json:"Dbid"`
	Status OptString `json:"Status"`
}

// GetDbid returns the value of Dbid.
func (s *DatabaseStatusDatabase) GetDbid() OptString {
	return s.Dbid
}

// GetStatus returns the value of Status.
func (s *DatabaseStatusDatabase) GetStatus() OptString {
	return s.Status
}

// SetDbid sets the value of Dbid.
func (s *DatabaseStatusDatabase) SetDbid(val OptString) {
	s.Dbid = val
}

// SetStatus sets the value of Status.
func (s *DatabaseStatusDatabase) SetStatus(val OptString) {
	s.Status = val
}

// Database entry in database list.
// Ref: #/components/schemas/Databases
type Databases struct {
	Database []DatabaseInformation `json:"Database"`
}

// GetDatabase returns the value of Database.
func (s *Databases) GetDatabase() []DatabaseInformation {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *Databases) SetDatabase(val []DatabaseInformation) {
	s.Database = val
}

func (*Databases) getDatabasesRes() {}

type DelAccessBadRequest Error

func (*DelAccessBadRequest) delAccessRes() {}

// DelAccessForbidden is response for DelAccess operation.
type DelAccessForbidden struct{}

func (*DelAccessForbidden) delAccessRes() {}

type DelAccessNotFound Error

func (*DelAccessNotFound) delAccessRes() {}

// DelAccessOK is response for DelAccess operation.
type DelAccessOK struct{}

func (*DelAccessOK) delAccessRes() {}

type DelAccessRole string

const (
	DelAccessRole_User          DelAccessRole = "User"
	DelAccessRole_user          DelAccessRole = "user"
	DelAccessRole_USER          DelAccessRole = "USER"
	DelAccessRole_Administrator DelAccessRole = "Administrator"
	DelAccessRole_administrator DelAccessRole = "administrator"
	DelAccessRole_ADMINISTRATOR DelAccessRole = "ADMINISTRATOR"
)

// AllValues returns all DelAccessRole values.
func (DelAccessRole) AllValues() []DelAccessRole {
	return []DelAccessRole{
		DelAccessRole_User,
		DelAccessRole_user,
		DelAccessRole_USER,
		DelAccessRole_Administrator,
		DelAccessRole_administrator,
		DelAccessRole_ADMINISTRATOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DelAccessRole) MarshalText() ([]byte, error) {
	switch s {
	case DelAccessRole_User:
		return []byte(s), nil
	case DelAccessRole_user:
		return []byte(s), nil
	case DelAccessRole_USER:
		return []byte(s), nil
	case DelAccessRole_Administrator:
		return []byte(s), nil
	case DelAccessRole_administrator:
		return []byte(s), nil
	case DelAccessRole_ADMINISTRATOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DelAccessRole) UnmarshalText(data []byte) error {
	switch DelAccessRole(data) {
	case DelAccessRole_User:
		*s = DelAccessRole_User
		return nil
	case DelAccessRole_user:
		*s = DelAccessRole_user
		return nil
	case DelAccessRole_USER:
		*s = DelAccessRole_USER
		return nil
	case DelAccessRole_Administrator:
		*s = DelAccessRole_Administrator
		return nil
	case DelAccessRole_administrator:
		*s = DelAccessRole_administrator
		return nil
	case DelAccessRole_ADMINISTRATOR:
		*s = DelAccessRole_ADMINISTRATOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DelAccessUnauthorized is response for DelAccess operation.
type DelAccessUnauthorized struct{}

func (*DelAccessUnauthorized) delAccessRes() {}

// DeleteDatabaseForbidden is response for DeleteDatabase operation.
type DeleteDatabaseForbidden struct{}

func (*DeleteDatabaseForbidden) deleteDatabaseRes() {}

// DeleteDatabaseUnauthorized is response for DeleteDatabase operation.
type DeleteDatabaseUnauthorized struct{}

func (*DeleteDatabaseUnauthorized) deleteDatabaseRes() {}

type DeleteExtendBadRequest Error

func (*DeleteExtendBadRequest) deleteExtendRes() {}

// DeleteExtendForbidden is response for DeleteExtend operation.
type DeleteExtendForbidden struct{}

func (*DeleteExtendForbidden) deleteExtendRes() {}

type DeleteExtendNotFound Error

func (*DeleteExtendNotFound) deleteExtendRes() {}

// DeleteExtendUnauthorized is response for DeleteExtend operation.
type DeleteExtendUnauthorized struct{}

func (*DeleteExtendUnauthorized) deleteExtendRes() {}

type DeleteFileLocationBadRequest Error

func (*DeleteFileLocationBadRequest) deleteFileLocationRes() {}

// DeleteFileLocationForbidden is response for DeleteFileLocation operation.
type DeleteFileLocationForbidden struct{}

func (*DeleteFileLocationForbidden) deleteFileLocationRes() {}

type DeleteFileLocationNotFound Error

func (*DeleteFileLocationNotFound) deleteFileLocationRes() {}

// DeleteFileLocationUnauthorized is response for DeleteFileLocation operation.
type DeleteFileLocationUnauthorized struct{}

func (*DeleteFileLocationUnauthorized) deleteFileLocationRes() {}

type DeleteJobResultBadRequest Error

func (*DeleteJobResultBadRequest) deleteJobResultRes() {}

// DeleteJobResultForbidden is response for DeleteJobResult operation.
type DeleteJobResultForbidden struct{}

func (*DeleteJobResultForbidden) deleteJobResultRes() {}

type DeleteJobResultNotFound Error

func (*DeleteJobResultNotFound) deleteJobResultRes() {}

// DeleteJobResultUnauthorized is response for DeleteJobResult operation.
type DeleteJobResultUnauthorized struct{}

func (*DeleteJobResultUnauthorized) deleteJobResultRes() {}

// DeleteRBACResourceForbidden is response for DeleteRBACResource operation.
type DeleteRBACResourceForbidden struct{}

func (*DeleteRBACResourceForbidden) deleteRBACResourceRes() {}

type DeleteRBACResourceResource string

const (
	DeleteRBACResourceResource_Role      DeleteRBACResourceResource = "Role"
	DeleteRBACResourceResource_role      DeleteRBACResourceResource = "role"
	DeleteRBACResourceResource_ROLE      DeleteRBACResourceResource = "ROLE"
	DeleteRBACResourceResource_Object    DeleteRBACResourceResource = "Object"
	DeleteRBACResourceResource_object    DeleteRBACResourceResource = "object"
	DeleteRBACResourceResource_OBJECT    DeleteRBACResourceResource = "OBJECT"
	DeleteRBACResourceResource_User      DeleteRBACResourceResource = "User"
	DeleteRBACResourceResource_user      DeleteRBACResourceResource = "user"
	DeleteRBACResourceResource_USER      DeleteRBACResourceResource = "USER"
	DeleteRBACResourceResource_Operation DeleteRBACResourceResource = "Operation"
	DeleteRBACResourceResource_operation DeleteRBACResourceResource = "operation"
	DeleteRBACResourceResource_OPERATION DeleteRBACResourceResource = "OPERATION"
)

// AllValues returns all DeleteRBACResourceResource values.
func (DeleteRBACResourceResource) AllValues() []DeleteRBACResourceResource {
	return []DeleteRBACResourceResource{
		DeleteRBACResourceResource_Role,
		DeleteRBACResourceResource_role,
		DeleteRBACResourceResource_ROLE,
		DeleteRBACResourceResource_Object,
		DeleteRBACResourceResource_object,
		DeleteRBACResourceResource_OBJECT,
		DeleteRBACResourceResource_User,
		DeleteRBACResourceResource_user,
		DeleteRBACResourceResource_USER,
		DeleteRBACResourceResource_Operation,
		DeleteRBACResourceResource_operation,
		DeleteRBACResourceResource_OPERATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteRBACResourceResource) MarshalText() ([]byte, error) {
	switch s {
	case DeleteRBACResourceResource_Role:
		return []byte(s), nil
	case DeleteRBACResourceResource_role:
		return []byte(s), nil
	case DeleteRBACResourceResource_ROLE:
		return []byte(s), nil
	case DeleteRBACResourceResource_Object:
		return []byte(s), nil
	case DeleteRBACResourceResource_object:
		return []byte(s), nil
	case DeleteRBACResourceResource_OBJECT:
		return []byte(s), nil
	case DeleteRBACResourceResource_User:
		return []byte(s), nil
	case DeleteRBACResourceResource_user:
		return []byte(s), nil
	case DeleteRBACResourceResource_USER:
		return []byte(s), nil
	case DeleteRBACResourceResource_Operation:
		return []byte(s), nil
	case DeleteRBACResourceResource_operation:
		return []byte(s), nil
	case DeleteRBACResourceResource_OPERATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteRBACResourceResource) UnmarshalText(data []byte) error {
	switch DeleteRBACResourceResource(data) {
	case DeleteRBACResourceResource_Role:
		*s = DeleteRBACResourceResource_Role
		return nil
	case DeleteRBACResourceResource_role:
		*s = DeleteRBACResourceResource_role
		return nil
	case DeleteRBACResourceResource_ROLE:
		*s = DeleteRBACResourceResource_ROLE
		return nil
	case DeleteRBACResourceResource_Object:
		*s = DeleteRBACResourceResource_Object
		return nil
	case DeleteRBACResourceResource_object:
		*s = DeleteRBACResourceResource_object
		return nil
	case DeleteRBACResourceResource_OBJECT:
		*s = DeleteRBACResourceResource_OBJECT
		return nil
	case DeleteRBACResourceResource_User:
		*s = DeleteRBACResourceResource_User
		return nil
	case DeleteRBACResourceResource_user:
		*s = DeleteRBACResourceResource_user
		return nil
	case DeleteRBACResourceResource_USER:
		*s = DeleteRBACResourceResource_USER
		return nil
	case DeleteRBACResourceResource_Operation:
		*s = DeleteRBACResourceResource_Operation
		return nil
	case DeleteRBACResourceResource_operation:
		*s = DeleteRBACResourceResource_operation
		return nil
	case DeleteRBACResourceResource_OPERATION:
		*s = DeleteRBACResourceResource_OPERATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteRBACResourceUnauthorized is response for DeleteRBACResource operation.
type DeleteRBACResourceUnauthorized struct{}

func (*DeleteRBACResourceUnauthorized) deleteRBACResourceRes() {}

// DeleteRecordsSearchedForbidden is response for DeleteRecordsSearched operation.
type DeleteRecordsSearchedForbidden struct{}

func (*DeleteRecordsSearchedForbidden) deleteRecordsSearchedRes() {}

// DeleteRecordsSearchedUnauthorized is response for DeleteRecordsSearched operation.
type DeleteRecordsSearchedUnauthorized struct{}

func (*DeleteRecordsSearchedUnauthorized) deleteRecordsSearchedRes() {}

// DeleteViewForbidden is response for DeleteView operation.
type DeleteViewForbidden struct{}

func (*DeleteViewForbidden) deleteViewRes() {}

// DeleteViewOK is response for DeleteView operation.
type DeleteViewOK struct{}

func (*DeleteViewOK) deleteViewRes() {}

// DeleteViewUnauthorized is response for DeleteView operation.
type DeleteViewUnauthorized struct{}

func (*DeleteViewUnauthorized) deleteViewRes() {}

// Ref: #/components/schemas/Directories
type Directories struct {
	Directories []Directory `json:"Directories"`
	System      OptString   `json:"system"`
}

// GetDirectories returns the value of Directories.
func (s *Directories) GetDirectories() []Directory {
	return s.Directories
}

// GetSystem returns the value of System.
func (s *Directories) GetSystem() OptString {
	return s.System
}

// SetDirectories sets the value of Directories.
func (s *Directories) SetDirectories(val []Directory) {
	s.Directories = val
}

// SetSystem sets the value of System.
func (s *Directories) SetSystem(val OptString) {
	s.System = val
}

func (*Directories) browseListRes() {}

// Ref: #/components/schemas/Directory
type Directory struct {
	Location OptString `json:"Location"`
	Name     OptString `json:"Name"`
}

// GetLocation returns the value of Location.
func (s *Directory) GetLocation() OptString {
	return s.Location
}

// GetName returns the value of Name.
func (s *Directory) GetName() OptString {
	return s.Name
}

// SetLocation sets the value of Location.
func (s *Directory) SetLocation(val OptString) {
	s.Location = val
}

// SetName sets the value of Name.
func (s *Directory) SetName(val OptString) {
	s.Name = val
}

// Ref: #/components/schemas/DirectoryFiles
type DirectoryFiles struct {
	Location OptString `json:"Location"`
	Path     OptString `json:"Path"`
	Files    []File    `json:"Files"`
	System   OptString `json:"system"`
}

// GetLocation returns the value of Location.
func (s *DirectoryFiles) GetLocation() OptString {
	return s.Location
}

// GetPath returns the value of Path.
func (s *DirectoryFiles) GetPath() OptString {
	return s.Path
}

// GetFiles returns the value of Files.
func (s *DirectoryFiles) GetFiles() []File {
	return s.Files
}

// GetSystem returns the value of System.
func (s *DirectoryFiles) GetSystem() OptString {
	return s.System
}

// SetLocation sets the value of Location.
func (s *DirectoryFiles) SetLocation(val OptString) {
	s.Location = val
}

// SetPath sets the value of Path.
func (s *DirectoryFiles) SetPath(val OptString) {
	s.Path = val
}

// SetFiles sets the value of Files.
func (s *DirectoryFiles) SetFiles(val []File) {
	s.Files = val
}

// SetSystem sets the value of System.
func (s *DirectoryFiles) SetSystem(val OptString) {
	s.System = val
}

func (*DirectoryFiles) browseLocationRes() {}

// DisconnectTCPForbidden is response for DisconnectTCP operation.
type DisconnectTCPForbidden struct{}

func (*DisconnectTCPForbidden) disconnectTCPRes() {}

// DisconnectTCPUnauthorized is response for DisconnectTCP operation.
type DisconnectTCPUnauthorized struct{}

func (*DisconnectTCPUnauthorized) disconnectTCPRes() {}

type DownloadFileBadRequest Error

func (*DownloadFileBadRequest) downloadFileRes() {}

// DownloadFileForbidden is response for DownloadFile operation.
type DownloadFileForbidden struct{}

func (*DownloadFileForbidden) downloadFileRes() {}

type DownloadFileNotFound Error

func (*DownloadFileNotFound) downloadFileRes() {}

type DownloadFileOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadFileOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DownloadFileOK) downloadFileRes() {}

// DownloadFileUnauthorized is response for DownloadFile operation.
type DownloadFileUnauthorized struct{}

func (*DownloadFileUnauthorized) downloadFileRes() {}

// Ref: #/components/schemas/Environments
type Environments struct {
	Environment *EnvironmentsEnvironment `json:"Environment"`
}

// GetEnvironment returns the value of Environment.
func (s *Environments) GetEnvironment() *EnvironmentsEnvironment {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *Environments) SetEnvironment(val *EnvironmentsEnvironment) {
	s.Environment = val
}

type EnvironmentsEnvironment struct{}

// EnvironmentsHeaders wraps Environments with response headers.
type EnvironmentsHeaders struct {
	XToken   OptString
	Response Environments
}

// GetXToken returns the value of XToken.
func (s *EnvironmentsHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *EnvironmentsHeaders) GetResponse() Environments {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *EnvironmentsHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *EnvironmentsHeaders) SetResponse(val Environments) {
	s.Response = val
}

func (*EnvironmentsHeaders) getEnvironmentsRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    OptString     `json:"code"`
	Message OptString     `json:"message"`
	Target  OptString     `json:"target"`
	Error   OptErrorError `json:"Error"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetTarget returns the value of Target.
func (s *Error) GetTarget() OptString {
	return s.Target
}

// GetError returns the value of Error.
func (s *Error) GetError() OptErrorError {
	return s.Error
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetTarget sets the value of Target.
func (s *Error) SetTarget(val OptString) {
	s.Target = val
}

// SetError sets the value of Error.
func (s *Error) SetError(val OptErrorError) {
	s.Error = val
}

func (*Error) adaptPermissionRes()        {}
func (*Error) addRBACResourceRes()        {}
func (*Error) addViewRes()                {}
func (*Error) batchParameterQueryRes()    {}
func (*Error) batchQueryRes()             {}
func (*Error) batchSelectRes()            {}
func (*Error) databaseOperationRes()      {}
func (*Error) databasePostOperationsRes() {}
func (*Error) deleteDatabaseRes()         {}
func (*Error) deleteRBACResourceRes()     {}
func (*Error) deleteRecordsSearchedRes()  {}
func (*Error) deleteViewRes()             {}
func (*Error) disconnectTCPRes()          {}
func (*Error) getConfigRes()              {}
func (*Error) getConnectionsRes()         {}
func (*Error) getDatabaseSessionsRes()    {}
func (*Error) getDatabaseStatsRes()       {}
func (*Error) getDatabasesRes()           {}
func (*Error) getEnvironmentsRes()        {}
func (*Error) getImageRes()               {}
func (*Error) getJobsConfigRes()          {}
func (*Error) getLobByMapRes()            {}
func (*Error) getLoginSessionRes()        {}
func (*Error) getMapMetadataRes()         {}
func (*Error) getMapRecordsFieldsRes()    {}
func (*Error) getMapsRes()                {}
func (*Error) getPermissionRes()          {}
func (*Error) getUserInfoRes()            {}
func (*Error) getVersionRes()             {}
func (*Error) getVideoRes()               {}
func (*Error) getViewsRes()               {}
func (*Error) insertRecordRes()           {}
func (*Error) listRBACResourceRes()       {}
func (*Error) loginSessionRes()           {}
func (*Error) postDatabaseRes()           {}
func (*Error) pushLoginSessionRes()       {}
func (*Error) putDatabaseResourceRes()    {}
func (*Error) removePermissionRes()       {}
func (*Error) searchRecordsFieldsRes()    {}
func (*Error) setConfigRes()              {}
func (*Error) setJobsConfigRes()          {}
func (*Error) shutdownServerRes()         {}
func (*Error) storeConfigRes()            {}
func (*Error) updateLobByMapRes()         {}
func (*Error) updateRecordsByFieldsRes()  {}

type ErrorError struct {
	Code    OptString `json:"code"`
	Message OptString `json:"message"`
	Target  OptString `json:"target"`
}

// GetCode returns the value of Code.
func (s *ErrorError) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() OptString {
	return s.Message
}

// GetTarget returns the value of Target.
func (s *ErrorError) GetTarget() OptString {
	return s.Target
}

// SetCode sets the value of Code.
func (s *ErrorError) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val OptString) {
	s.Message = val
}

// SetTarget sets the value of Target.
func (s *ErrorError) SetTarget(val OptString) {
	s.Target = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Executions
type Executions struct {
	Database  OptInt      `json:"Database"`
	Ended     OptDateTime `json:"Ended"`
	ExitCode  OptFloat64  `json:"ExitCode"`
	ID        OptInt      `json:"Id"`
	Log       OptString   `json:"Log"`
	StartedBy OptString   `json:"StartedBy"`
	Scheduled OptDateTime `json:"Scheduled"`
}

// GetDatabase returns the value of Database.
func (s *Executions) GetDatabase() OptInt {
	return s.Database
}

// GetEnded returns the value of Ended.
func (s *Executions) GetEnded() OptDateTime {
	return s.Ended
}

// GetExitCode returns the value of ExitCode.
func (s *Executions) GetExitCode() OptFloat64 {
	return s.ExitCode
}

// GetID returns the value of ID.
func (s *Executions) GetID() OptInt {
	return s.ID
}

// GetLog returns the value of Log.
func (s *Executions) GetLog() OptString {
	return s.Log
}

// GetStartedBy returns the value of StartedBy.
func (s *Executions) GetStartedBy() OptString {
	return s.StartedBy
}

// GetScheduled returns the value of Scheduled.
func (s *Executions) GetScheduled() OptDateTime {
	return s.Scheduled
}

// SetDatabase sets the value of Database.
func (s *Executions) SetDatabase(val OptInt) {
	s.Database = val
}

// SetEnded sets the value of Ended.
func (s *Executions) SetEnded(val OptDateTime) {
	s.Ended = val
}

// SetExitCode sets the value of ExitCode.
func (s *Executions) SetExitCode(val OptFloat64) {
	s.ExitCode = val
}

// SetID sets the value of ID.
func (s *Executions) SetID(val OptInt) {
	s.ID = val
}

// SetLog sets the value of Log.
func (s *Executions) SetLog(val OptString) {
	s.Log = val
}

// SetStartedBy sets the value of StartedBy.
func (s *Executions) SetStartedBy(val OptString) {
	s.StartedBy = val
}

// SetScheduled sets the value of Scheduled.
func (s *Executions) SetScheduled(val OptDateTime) {
	s.Scheduled = val
}

// Ref: #/components/schemas/FieldItem
type FieldItem struct {
	Level      OptInt    `json:"level"`
	Value      OptString `json:"value"`
	Format     OptString `json:"format"`
	Length     OptInt    `json:"length"`
	Options    OptString `json:"options"`
	Identifier OptString `json:"identifier"`
	Label      OptString `json:"label"`
}

// GetLevel returns the value of Level.
func (s *FieldItem) GetLevel() OptInt {
	return s.Level
}

// GetValue returns the value of Value.
func (s *FieldItem) GetValue() OptString {
	return s.Value
}

// GetFormat returns the value of Format.
func (s *FieldItem) GetFormat() OptString {
	return s.Format
}

// GetLength returns the value of Length.
func (s *FieldItem) GetLength() OptInt {
	return s.Length
}

// GetOptions returns the value of Options.
func (s *FieldItem) GetOptions() OptString {
	return s.Options
}

// GetIdentifier returns the value of Identifier.
func (s *FieldItem) GetIdentifier() OptString {
	return s.Identifier
}

// GetLabel returns the value of Label.
func (s *FieldItem) GetLabel() OptString {
	return s.Label
}

// SetLevel sets the value of Level.
func (s *FieldItem) SetLevel(val OptInt) {
	s.Level = val
}

// SetValue sets the value of Value.
func (s *FieldItem) SetValue(val OptString) {
	s.Value = val
}

// SetFormat sets the value of Format.
func (s *FieldItem) SetFormat(val OptString) {
	s.Format = val
}

// SetLength sets the value of Length.
func (s *FieldItem) SetLength(val OptInt) {
	s.Length = val
}

// SetOptions sets the value of Options.
func (s *FieldItem) SetOptions(val OptString) {
	s.Options = val
}

// SetIdentifier sets the value of Identifier.
func (s *FieldItem) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetLabel sets the value of Label.
func (s *FieldItem) SetLabel(val OptString) {
	s.Label = val
}

type Fields []FieldItem

// FieldsHeaders wraps Fields with response headers.
type FieldsHeaders struct {
	XToken   OptString
	Response Fields
}

// GetXToken returns the value of XToken.
func (s *FieldsHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *FieldsHeaders) GetResponse() Fields {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *FieldsHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *FieldsHeaders) SetResponse(val Fields) {
	s.Response = val
}

func (*FieldsHeaders) getFieldsRes() {}

// Ref: #/components/schemas/File
type File struct {
	Name     OptString   `json:"Name"`
	Type     OptString   `json:"Type"`
	Modified OptDateTime `json:"Modified"`
	Size     OptInt64    `json:"Size"`
}

// GetName returns the value of Name.
func (s *File) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *File) GetType() OptString {
	return s.Type
}

// GetModified returns the value of Modified.
func (s *File) GetModified() OptDateTime {
	return s.Modified
}

// GetSize returns the value of Size.
func (s *File) GetSize() OptInt64 {
	return s.Size
}

// SetName sets the value of Name.
func (s *File) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *File) SetType(val OptString) {
	s.Type = val
}

// SetModified sets the value of Modified.
func (s *File) SetModified(val OptDateTime) {
	s.Modified = val
}

// SetSize sets the value of Size.
func (s *File) SetSize(val OptInt64) {
	s.Size = val
}

// GetConfigForbidden is response for GetConfig operation.
type GetConfigForbidden struct{}

func (*GetConfigForbidden) getConfigRes() {}

// GetConfigUnauthorized is response for GetConfig operation.
type GetConfigUnauthorized struct{}

func (*GetConfigUnauthorized) getConfigRes() {}

// GetConnectionsForbidden is response for GetConnections operation.
type GetConnectionsForbidden struct{}

func (*GetConnectionsForbidden) getConnectionsRes() {}

// GetConnectionsUnauthorized is response for GetConnections operation.
type GetConnectionsUnauthorized struct{}

func (*GetConnectionsUnauthorized) getConnectionsRes() {}

// GetDatabaseSessionsForbidden is response for GetDatabaseSessions operation.
type GetDatabaseSessionsForbidden struct{}

func (*GetDatabaseSessionsForbidden) getDatabaseSessionsRes() {}

// GetDatabaseSessionsUnauthorized is response for GetDatabaseSessions operation.
type GetDatabaseSessionsUnauthorized struct{}

func (*GetDatabaseSessionsUnauthorized) getDatabaseSessionsRes() {}

// GetDatabaseStatsForbidden is response for GetDatabaseStats operation.
type GetDatabaseStatsForbidden struct{}

func (*GetDatabaseStatsForbidden) getDatabaseStatsRes() {}

// GetDatabaseStatsUnauthorized is response for GetDatabaseStats operation.
type GetDatabaseStatsUnauthorized struct{}

func (*GetDatabaseStatsUnauthorized) getDatabaseStatsRes() {}

// GetDatabasesForbidden is response for GetDatabases operation.
type GetDatabasesForbidden struct{}

func (*GetDatabasesForbidden) getDatabasesRes() {}

// GetDatabasesUnauthorized is response for GetDatabases operation.
type GetDatabasesUnauthorized struct{}

func (*GetDatabasesUnauthorized) getDatabasesRes() {}

// GetEnvironmentsForbidden is response for GetEnvironments operation.
type GetEnvironmentsForbidden struct{}

func (*GetEnvironmentsForbidden) getEnvironmentsRes() {}

// GetEnvironmentsUnauthorized is response for GetEnvironments operation.
type GetEnvironmentsUnauthorized struct{}

func (*GetEnvironmentsUnauthorized) getEnvironmentsRes() {}

type GetFieldsBadRequest Error

func (*GetFieldsBadRequest) getFieldsRes() {}

// GetFieldsForbidden is response for GetFields operation.
type GetFieldsForbidden struct{}

func (*GetFieldsForbidden) getFieldsRes() {}

type GetFieldsNotFound Error

func (*GetFieldsNotFound) getFieldsRes() {}

// GetFieldsUnauthorized is response for GetFields operation.
type GetFieldsUnauthorized struct{}

func (*GetFieldsUnauthorized) getFieldsRes() {}

// GetImageForbidden is response for GetImage operation.
type GetImageForbidden struct{}

func (*GetImageForbidden) getImageRes() {}

type GetImageOKImageGIF struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetImageOKImageGIF) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetImageOKImageGIF) getImageRes() {}

type GetImageOKImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetImageOKImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetImageOKImageJpeg) getImageRes() {}

type GetImageOKImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetImageOKImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetImageOKImagePNG) getImageRes() {}

// GetImageUnauthorized is response for GetImage operation.
type GetImageUnauthorized struct {
	WwwAuthenticate OptString
}

// GetWwwAuthenticate returns the value of WwwAuthenticate.
func (s *GetImageUnauthorized) GetWwwAuthenticate() OptString {
	return s.WwwAuthenticate
}

// SetWwwAuthenticate sets the value of WwwAuthenticate.
func (s *GetImageUnauthorized) SetWwwAuthenticate(val OptString) {
	s.WwwAuthenticate = val
}

func (*GetImageUnauthorized) getImageRes() {}

type GetJobExecutionResultBadRequest Error

func (*GetJobExecutionResultBadRequest) getJobExecutionResultRes() {}

// GetJobExecutionResultForbidden is response for GetJobExecutionResult operation.
type GetJobExecutionResultForbidden struct{}

func (*GetJobExecutionResultForbidden) getJobExecutionResultRes() {}

type GetJobExecutionResultNotFound Error

func (*GetJobExecutionResultNotFound) getJobExecutionResultRes() {}

// GetJobExecutionResultUnauthorized is response for GetJobExecutionResult operation.
type GetJobExecutionResultUnauthorized struct{}

func (*GetJobExecutionResultUnauthorized) getJobExecutionResultRes() {}

type GetJobFullInfoBadRequest Error

func (*GetJobFullInfoBadRequest) getJobFullInfoRes() {}

// GetJobFullInfoForbidden is response for GetJobFullInfo operation.
type GetJobFullInfoForbidden struct{}

func (*GetJobFullInfoForbidden) getJobFullInfoRes() {}

type GetJobFullInfoNotFound Error

func (*GetJobFullInfoNotFound) getJobFullInfoRes() {}

// GetJobFullInfoUnauthorized is response for GetJobFullInfo operation.
type GetJobFullInfoUnauthorized struct{}

func (*GetJobFullInfoUnauthorized) getJobFullInfoRes() {}

type GetJobResultBadRequest Error

func (*GetJobResultBadRequest) getJobResultRes() {}

// GetJobResultForbidden is response for GetJobResult operation.
type GetJobResultForbidden struct{}

func (*GetJobResultForbidden) getJobResultRes() {}

type GetJobResultNotFound Error

func (*GetJobResultNotFound) getJobResultRes() {}

// GetJobResultUnauthorized is response for GetJobResult operation.
type GetJobResultUnauthorized struct{}

func (*GetJobResultUnauthorized) getJobResultRes() {}

// GetJobsConfigForbidden is response for GetJobsConfig operation.
type GetJobsConfigForbidden struct{}

func (*GetJobsConfigForbidden) getJobsConfigRes() {}

// GetJobsConfigUnauthorized is response for GetJobsConfig operation.
type GetJobsConfigUnauthorized struct{}

func (*GetJobsConfigUnauthorized) getJobsConfigRes() {}

// GetJobsForbidden is response for GetJobs operation.
type GetJobsForbidden struct{}

func (*GetJobsForbidden) getJobsRes() {}

// GetJobsNotFound is response for GetJobs operation.
type GetJobsNotFound struct{}

func (*GetJobsNotFound) getJobsRes() {}

// GetJobsUnauthorized is response for GetJobs operation.
type GetJobsUnauthorized struct{}

func (*GetJobsUnauthorized) getJobsRes() {}

// GetLobByMapForbidden is response for GetLobByMap operation.
type GetLobByMapForbidden struct{}

func (*GetLobByMapForbidden) getLobByMapRes() {}

type GetLobByMapOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetLobByMapOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetLobByMapOK) getLobByMapRes() {}

// GetLobByMapUnauthorized is response for GetLobByMap operation.
type GetLobByMapUnauthorized struct{}

func (*GetLobByMapUnauthorized) getLobByMapRes() {}

// GetLoginSessionForbidden is response for GetLoginSession operation.
type GetLoginSessionForbidden struct{}

func (*GetLoginSessionForbidden) getLoginSessionRes() {}

// GetLoginSessionUnauthorized is response for GetLoginSession operation.
type GetLoginSessionUnauthorized struct{}

func (*GetLoginSessionUnauthorized) getLoginSessionRes() {}

// GetMapMetadataForbidden is response for GetMapMetadata operation.
type GetMapMetadataForbidden struct{}

func (*GetMapMetadataForbidden) getMapMetadataRes() {}

// GetMapMetadataUnauthorized is response for GetMapMetadata operation.
type GetMapMetadataUnauthorized struct{}

func (*GetMapMetadataUnauthorized) getMapMetadataRes() {}

// GetMapRecordsFieldsForbidden is response for GetMapRecordsFields operation.
type GetMapRecordsFieldsForbidden struct{}

func (*GetMapRecordsFieldsForbidden) getMapRecordsFieldsRes() {}

// GetMapRecordsFieldsUnauthorized is response for GetMapRecordsFields operation.
type GetMapRecordsFieldsUnauthorized struct{}

func (*GetMapRecordsFieldsUnauthorized) getMapRecordsFieldsRes() {}

// GetMapsForbidden is response for GetMaps operation.
type GetMapsForbidden struct{}

func (*GetMapsForbidden) getMapsRes() {}

// GetMapsUnauthorized is response for GetMaps operation.
type GetMapsUnauthorized struct{}

func (*GetMapsUnauthorized) getMapsRes() {}

// GetPermissionForbidden is response for GetPermission operation.
type GetPermissionForbidden struct{}

func (*GetPermissionForbidden) getPermissionRes() {}

type GetPermissionList string

const (
	GetPermissionListAssignments GetPermissionList = "assignments"
	GetPermissionListUserrole    GetPermissionList = "userrole"
)

// AllValues returns all GetPermissionList values.
func (GetPermissionList) AllValues() []GetPermissionList {
	return []GetPermissionList{
		GetPermissionListAssignments,
		GetPermissionListUserrole,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPermissionList) MarshalText() ([]byte, error) {
	switch s {
	case GetPermissionListAssignments:
		return []byte(s), nil
	case GetPermissionListUserrole:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPermissionList) UnmarshalText(data []byte) error {
	switch GetPermissionList(data) {
	case GetPermissionListAssignments:
		*s = GetPermissionListAssignments
		return nil
	case GetPermissionListUserrole:
		*s = GetPermissionListUserrole
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetPermissionOK is response for GetPermission operation.
type GetPermissionOK struct{}

func (*GetPermissionOK) getPermissionRes() {}

// GetPermissionUnauthorized is response for GetPermission operation.
type GetPermissionUnauthorized struct{}

func (*GetPermissionUnauthorized) getPermissionRes() {}

// GetUserInfoForbidden is response for GetUserInfo operation.
type GetUserInfoForbidden struct{}

func (*GetUserInfoForbidden) getUserInfoRes() {}

// GetUserInfoUnauthorized is response for GetUserInfo operation.
type GetUserInfoUnauthorized struct{}

func (*GetUserInfoUnauthorized) getUserInfoRes() {}

// GetVideoForbidden is response for GetVideo operation.
type GetVideoForbidden struct{}

func (*GetVideoForbidden) getVideoRes() {}

type GetVideoOKVideoMP4 struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVideoOKVideoMP4) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVideoOKVideoMP4) getVideoRes() {}

type GetVideoOKVideoMov struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVideoOKVideoMov) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVideoOKVideoMov) getVideoRes() {}

// GetVideoUnauthorized is response for GetVideo operation.
type GetVideoUnauthorized struct {
	WwwAuthenticate OptString
}

// GetWwwAuthenticate returns the value of WwwAuthenticate.
func (s *GetVideoUnauthorized) GetWwwAuthenticate() OptString {
	return s.WwwAuthenticate
}

// SetWwwAuthenticate sets the value of WwwAuthenticate.
func (s *GetVideoUnauthorized) SetWwwAuthenticate(val OptString) {
	s.WwwAuthenticate = val
}

func (*GetVideoUnauthorized) getVideoRes() {}

// GetViewsForbidden is response for GetViews operation.
type GetViewsForbidden struct{}

func (*GetViewsForbidden) getViewsRes() {}

// GetViewsOK is response for GetViews operation.
type GetViewsOK struct {
	XToken OptString
}

// GetXToken returns the value of XToken.
func (s *GetViewsOK) GetXToken() OptString {
	return s.XToken
}

// SetXToken sets the value of XToken.
func (s *GetViewsOK) SetXToken(val OptString) {
	s.XToken = val
}

func (*GetViewsOK) getViewsRes() {}

// GetViewsUnauthorized is response for GetViews operation.
type GetViewsUnauthorized struct{}

func (*GetViewsUnauthorized) getViewsRes() {}

type InsertMapFileRecordsBadRequest Error

func (*InsertMapFileRecordsBadRequest) insertMapFileRecordsRes() {}

// InsertMapFileRecordsForbidden is response for InsertMapFileRecords operation.
type InsertMapFileRecordsForbidden struct{}

func (*InsertMapFileRecordsForbidden) insertMapFileRecordsRes() {}

type InsertMapFileRecordsNotFound Error

func (*InsertMapFileRecordsNotFound) insertMapFileRecordsRes() {}

type InsertMapFileRecordsReq struct {
	// The file to upload.
	Data OptMultipartFile `json:"data"`
}

// GetData returns the value of Data.
func (s *InsertMapFileRecordsReq) GetData() OptMultipartFile {
	return s.Data
}

// SetData sets the value of Data.
func (s *InsertMapFileRecordsReq) SetData(val OptMultipartFile) {
	s.Data = val
}

// InsertMapFileRecordsUnauthorized is response for InsertMapFileRecords operation.
type InsertMapFileRecordsUnauthorized struct{}

func (*InsertMapFileRecordsUnauthorized) insertMapFileRecordsRes() {}

// InsertRecordBadRequest is response for InsertRecord operation.
type InsertRecordBadRequest struct{}

func (*InsertRecordBadRequest) insertRecordRes() {}

// InsertRecordForbidden is response for InsertRecord operation.
type InsertRecordForbidden struct{}

func (*InsertRecordForbidden) insertRecordRes() {}

type InsertRecordReq struct {
	Records []InsertRecordReqRecordsItem `json:"Records"`
}

// GetRecords returns the value of Records.
func (s *InsertRecordReq) GetRecords() []InsertRecordReqRecordsItem {
	return s.Records
}

// SetRecords sets the value of Records.
func (s *InsertRecordReq) SetRecords(val []InsertRecordReqRecordsItem) {
	s.Records = val
}

type InsertRecordReqRecordsItem map[string]jx.Raw

func (s *InsertRecordReqRecordsItem) init() InsertRecordReqRecordsItem {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// InsertRecordUnauthorized is response for InsertRecord operation.
type InsertRecordUnauthorized struct{}

func (*InsertRecordUnauthorized) insertRecordRes() {}

// Ref: #/components/schemas/Job
type Job struct {
	Description  OptString             `json:"Description"`
	Environments []JobEnvironmentsItem `json:"Environments"`
	Name         OptString             `json:"Name"`
	Parameters   []JobParametersItem   `json:"Parameters"`
	Script       OptString             `json:"Script"`
	User         OptString             `json:"User"`
	Utility      OptString             `json:"Utility"`
	CronSchedule OptString             `json:"CronSchedule"`
}

// GetDescription returns the value of Description.
func (s *Job) GetDescription() OptString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *Job) GetEnvironments() []JobEnvironmentsItem {
	return s.Environments
}

// GetName returns the value of Name.
func (s *Job) GetName() OptString {
	return s.Name
}

// GetParameters returns the value of Parameters.
func (s *Job) GetParameters() []JobParametersItem {
	return s.Parameters
}

// GetScript returns the value of Script.
func (s *Job) GetScript() OptString {
	return s.Script
}

// GetUser returns the value of User.
func (s *Job) GetUser() OptString {
	return s.User
}

// GetUtility returns the value of Utility.
func (s *Job) GetUtility() OptString {
	return s.Utility
}

// GetCronSchedule returns the value of CronSchedule.
func (s *Job) GetCronSchedule() OptString {
	return s.CronSchedule
}

// SetDescription sets the value of Description.
func (s *Job) SetDescription(val OptString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *Job) SetEnvironments(val []JobEnvironmentsItem) {
	s.Environments = val
}

// SetName sets the value of Name.
func (s *Job) SetName(val OptString) {
	s.Name = val
}

// SetParameters sets the value of Parameters.
func (s *Job) SetParameters(val []JobParametersItem) {
	s.Parameters = val
}

// SetScript sets the value of Script.
func (s *Job) SetScript(val OptString) {
	s.Script = val
}

// SetUser sets the value of User.
func (s *Job) SetUser(val OptString) {
	s.User = val
}

// SetUtility sets the value of Utility.
func (s *Job) SetUtility(val OptString) {
	s.Utility = val
}

// SetCronSchedule sets the value of CronSchedule.
func (s *Job) SetCronSchedule(val OptString) {
	s.CronSchedule = val
}

// Ref: #/components/schemas/JobDefinition
type JobDefinition struct {
	Executions []Executions `json:"Executions"`
	Job        OptJob       `json:"Job"`
	Status     OptString    `json:"Status"`
}

// GetExecutions returns the value of Executions.
func (s *JobDefinition) GetExecutions() []Executions {
	return s.Executions
}

// GetJob returns the value of Job.
func (s *JobDefinition) GetJob() OptJob {
	return s.Job
}

// GetStatus returns the value of Status.
func (s *JobDefinition) GetStatus() OptString {
	return s.Status
}

// SetExecutions sets the value of Executions.
func (s *JobDefinition) SetExecutions(val []Executions) {
	s.Executions = val
}

// SetJob sets the value of Job.
func (s *JobDefinition) SetJob(val OptJob) {
	s.Job = val
}

// SetStatus sets the value of Status.
func (s *JobDefinition) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/JobDescription
type JobDescription struct {
	CronSchedule OptString                        `json:"CronSchedule"`
	Description  OptString                        `json:"Description"`
	Environments []JobDescriptionEnvironmentsItem `json:"Environments"`
	Name         OptString                        `json:"Name"`
	Parameters   []JobDescriptionParametersItem   `json:"Parameters"`
	Script       OptString                        `json:"Script"`
	User         OptString                        `json:"User"`
	Utility      OptString                        `json:"Utility"`
}

// GetCronSchedule returns the value of CronSchedule.
func (s *JobDescription) GetCronSchedule() OptString {
	return s.CronSchedule
}

// GetDescription returns the value of Description.
func (s *JobDescription) GetDescription() OptString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *JobDescription) GetEnvironments() []JobDescriptionEnvironmentsItem {
	return s.Environments
}

// GetName returns the value of Name.
func (s *JobDescription) GetName() OptString {
	return s.Name
}

// GetParameters returns the value of Parameters.
func (s *JobDescription) GetParameters() []JobDescriptionParametersItem {
	return s.Parameters
}

// GetScript returns the value of Script.
func (s *JobDescription) GetScript() OptString {
	return s.Script
}

// GetUser returns the value of User.
func (s *JobDescription) GetUser() OptString {
	return s.User
}

// GetUtility returns the value of Utility.
func (s *JobDescription) GetUtility() OptString {
	return s.Utility
}

// SetCronSchedule sets the value of CronSchedule.
func (s *JobDescription) SetCronSchedule(val OptString) {
	s.CronSchedule = val
}

// SetDescription sets the value of Description.
func (s *JobDescription) SetDescription(val OptString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *JobDescription) SetEnvironments(val []JobDescriptionEnvironmentsItem) {
	s.Environments = val
}

// SetName sets the value of Name.
func (s *JobDescription) SetName(val OptString) {
	s.Name = val
}

// SetParameters sets the value of Parameters.
func (s *JobDescription) SetParameters(val []JobDescriptionParametersItem) {
	s.Parameters = val
}

// SetScript sets the value of Script.
func (s *JobDescription) SetScript(val OptString) {
	s.Script = val
}

// SetUser sets the value of User.
func (s *JobDescription) SetUser(val OptString) {
	s.User = val
}

// SetUtility sets the value of Utility.
func (s *JobDescription) SetUtility(val OptString) {
	s.Utility = val
}

type JobDescriptionEnvironmentsItem struct {
	Parameter OptString `json:"Parameter"`
}

// GetParameter returns the value of Parameter.
func (s *JobDescriptionEnvironmentsItem) GetParameter() OptString {
	return s.Parameter
}

// SetParameter sets the value of Parameter.
func (s *JobDescriptionEnvironmentsItem) SetParameter(val OptString) {
	s.Parameter = val
}

type JobDescriptionParametersItem struct {
	Parameter OptString `json:"Parameter"`
}

// GetParameter returns the value of Parameter.
func (s *JobDescriptionParametersItem) GetParameter() OptString {
	return s.Parameter
}

// SetParameter sets the value of Parameter.
func (s *JobDescriptionParametersItem) SetParameter(val OptString) {
	s.Parameter = val
}

type JobEnvironmentsItem struct {
	Parameter OptString `json:"Parameter"`
}

// GetParameter returns the value of Parameter.
func (s *JobEnvironmentsItem) GetParameter() OptString {
	return s.Parameter
}

// SetParameter sets the value of Parameter.
func (s *JobEnvironmentsItem) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/JobFull
type JobFull struct {
	Job OptJobDefinition `json:"Job"`
}

// GetJob returns the value of Job.
func (s *JobFull) GetJob() OptJobDefinition {
	return s.Job
}

// SetJob sets the value of Job.
func (s *JobFull) SetJob(val OptJobDefinition) {
	s.Job = val
}

func (*JobFull) getJobFullInfoRes() {}

// Ref: #/components/schemas/JobParameter
type JobParameter struct {
	Job OptJobDescription `json:"Job"`
}

// GetJob returns the value of Job.
func (s *JobParameter) GetJob() OptJobDescription {
	return s.Job
}

// SetJob sets the value of Job.
func (s *JobParameter) SetJob(val OptJobDescription) {
	s.Job = val
}

func (*JobParameter) postJobReq() {}

type JobParametersItem struct {
	Parameter OptString `json:"Parameter"`
}

// GetParameter returns the value of Parameter.
func (s *JobParametersItem) GetParameter() OptString {
	return s.Parameter
}

// SetParameter sets the value of Parameter.
func (s *JobParametersItem) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/JobResult
type JobResult struct {
	JobResult OptJobResultJobResult `json:"JobResult"`
}

// GetJobResult returns the value of JobResult.
func (s *JobResult) GetJobResult() OptJobResultJobResult {
	return s.JobResult
}

// SetJobResult sets the value of JobResult.
func (s *JobResult) SetJobResult(val OptJobResultJobResult) {
	s.JobResult = val
}

func (*JobResult) getJobExecutionResultRes() {}
func (*JobResult) getJobResultRes()          {}

type JobResultJobResult struct {
	Description OptString   `json:"Description"`
	Ended       OptDateTime `json:"Ended"`
	ExitCode    OptFloat64  `json:"ExitCode"`
	ID          OptFloat64  `json:"Id"`
	Log         OptString   `json:"Log"`
	Name        OptString   `json:"Name"`
	Scheduled   OptDateTime `json:"Scheduled"`
	StartedBy   OptString   `json:"StartedBy"`
	Status      OptString   `json:"Status"`
}

// GetDescription returns the value of Description.
func (s *JobResultJobResult) GetDescription() OptString {
	return s.Description
}

// GetEnded returns the value of Ended.
func (s *JobResultJobResult) GetEnded() OptDateTime {
	return s.Ended
}

// GetExitCode returns the value of ExitCode.
func (s *JobResultJobResult) GetExitCode() OptFloat64 {
	return s.ExitCode
}

// GetID returns the value of ID.
func (s *JobResultJobResult) GetID() OptFloat64 {
	return s.ID
}

// GetLog returns the value of Log.
func (s *JobResultJobResult) GetLog() OptString {
	return s.Log
}

// GetName returns the value of Name.
func (s *JobResultJobResult) GetName() OptString {
	return s.Name
}

// GetScheduled returns the value of Scheduled.
func (s *JobResultJobResult) GetScheduled() OptDateTime {
	return s.Scheduled
}

// GetStartedBy returns the value of StartedBy.
func (s *JobResultJobResult) GetStartedBy() OptString {
	return s.StartedBy
}

// GetStatus returns the value of Status.
func (s *JobResultJobResult) GetStatus() OptString {
	return s.Status
}

// SetDescription sets the value of Description.
func (s *JobResultJobResult) SetDescription(val OptString) {
	s.Description = val
}

// SetEnded sets the value of Ended.
func (s *JobResultJobResult) SetEnded(val OptDateTime) {
	s.Ended = val
}

// SetExitCode sets the value of ExitCode.
func (s *JobResultJobResult) SetExitCode(val OptFloat64) {
	s.ExitCode = val
}

// SetID sets the value of ID.
func (s *JobResultJobResult) SetID(val OptFloat64) {
	s.ID = val
}

// SetLog sets the value of Log.
func (s *JobResultJobResult) SetLog(val OptString) {
	s.Log = val
}

// SetName sets the value of Name.
func (s *JobResultJobResult) SetName(val OptString) {
	s.Name = val
}

// SetScheduled sets the value of Scheduled.
func (s *JobResultJobResult) SetScheduled(val OptDateTime) {
	s.Scheduled = val
}

// SetStartedBy sets the value of StartedBy.
func (s *JobResultJobResult) SetStartedBy(val OptString) {
	s.StartedBy = val
}

// SetStatus sets the value of Status.
func (s *JobResultJobResult) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/JobStatusResponse
type JobStatusResponse struct {
	Status OptJobStatusResponseStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *JobStatusResponse) GetStatus() OptJobStatusResponseStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *JobStatusResponse) SetStatus(val OptJobStatusResponseStatus) {
	s.Status = val
}

func (*JobStatusResponse) deleteJobResultRes() {}

type JobStatusResponseStatus struct {
	Action      OptString `json:"Action"`
	ExecutionId OptInt    `json:"ExecutionId"`
	Message     OptString `json:"Message"`
	Name        OptString `json:"Name"`
}

// GetAction returns the value of Action.
func (s *JobStatusResponseStatus) GetAction() OptString {
	return s.Action
}

// GetExecutionId returns the value of ExecutionId.
func (s *JobStatusResponseStatus) GetExecutionId() OptInt {
	return s.ExecutionId
}

// GetMessage returns the value of Message.
func (s *JobStatusResponseStatus) GetMessage() OptString {
	return s.Message
}

// GetName returns the value of Name.
func (s *JobStatusResponseStatus) GetName() OptString {
	return s.Name
}

// SetAction sets the value of Action.
func (s *JobStatusResponseStatus) SetAction(val OptString) {
	s.Action = val
}

// SetExecutionId sets the value of ExecutionId.
func (s *JobStatusResponseStatus) SetExecutionId(val OptInt) {
	s.ExecutionId = val
}

// SetMessage sets the value of Message.
func (s *JobStatusResponseStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetName sets the value of Name.
func (s *JobStatusResponseStatus) SetName(val OptString) {
	s.Name = val
}

// Ref: #/components/schemas/JobStore
type JobStore struct {
	Config   OptString         `json:"config"`
	Database OptDatabaseConfig `json:"Database"`
}

// GetConfig returns the value of Config.
func (s *JobStore) GetConfig() OptString {
	return s.Config
}

// GetDatabase returns the value of Database.
func (s *JobStore) GetDatabase() OptDatabaseConfig {
	return s.Database
}

// SetConfig sets the value of Config.
func (s *JobStore) SetConfig(val OptString) {
	s.Config = val
}

// SetDatabase sets the value of Database.
func (s *JobStore) SetDatabase(val OptDatabaseConfig) {
	s.Database = val
}

func (*JobStore) getJobsConfigRes() {}

// Ref: #/components/schemas/JobsList
type JobsList struct {
	JobDefinition []JobDefinition `json:"JobDefinition"`
}

// GetJobDefinition returns the value of JobDefinition.
func (s *JobsList) GetJobDefinition() []JobDefinition {
	return s.JobDefinition
}

// SetJobDefinition sets the value of JobDefinition.
func (s *JobsList) SetJobDefinition(val []JobDefinition) {
	s.JobDefinition = val
}

func (*JobsList) getJobsRes() {}

type ListModellingBadRequest Error

func (*ListModellingBadRequest) listModellingRes() {}

// ListModellingForbidden is response for ListModelling operation.
type ListModellingForbidden struct{}

func (*ListModellingForbidden) listModellingRes() {}

type ListModellingNotFound Error

func (*ListModellingNotFound) listModellingRes() {}

// ListModellingUnauthorized is response for ListModelling operation.
type ListModellingUnauthorized struct{}

func (*ListModellingUnauthorized) listModellingRes() {}

// ListRBACResourceForbidden is response for ListRBACResource operation.
type ListRBACResourceForbidden struct{}

func (*ListRBACResourceForbidden) listRBACResourceRes() {}

// ListRBACResourceOK is response for ListRBACResource operation.
type ListRBACResourceOK struct{}

func (*ListRBACResourceOK) listRBACResourceRes() {}

type ListRBACResourceResource string

const (
	ListRBACResourceResource_Role      ListRBACResourceResource = "Role"
	ListRBACResourceResource_role      ListRBACResourceResource = "role"
	ListRBACResourceResource_ROLE      ListRBACResourceResource = "ROLE"
	ListRBACResourceResource_Object    ListRBACResourceResource = "Object"
	ListRBACResourceResource_object    ListRBACResourceResource = "object"
	ListRBACResourceResource_OBJECT    ListRBACResourceResource = "OBJECT"
	ListRBACResourceResource_User      ListRBACResourceResource = "User"
	ListRBACResourceResource_user      ListRBACResourceResource = "user"
	ListRBACResourceResource_USER      ListRBACResourceResource = "USER"
	ListRBACResourceResource_Operation ListRBACResourceResource = "Operation"
	ListRBACResourceResource_operation ListRBACResourceResource = "operation"
	ListRBACResourceResource_OPERATION ListRBACResourceResource = "OPERATION"
)

// AllValues returns all ListRBACResourceResource values.
func (ListRBACResourceResource) AllValues() []ListRBACResourceResource {
	return []ListRBACResourceResource{
		ListRBACResourceResource_Role,
		ListRBACResourceResource_role,
		ListRBACResourceResource_ROLE,
		ListRBACResourceResource_Object,
		ListRBACResourceResource_object,
		ListRBACResourceResource_OBJECT,
		ListRBACResourceResource_User,
		ListRBACResourceResource_user,
		ListRBACResourceResource_USER,
		ListRBACResourceResource_Operation,
		ListRBACResourceResource_operation,
		ListRBACResourceResource_OPERATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRBACResourceResource) MarshalText() ([]byte, error) {
	switch s {
	case ListRBACResourceResource_Role:
		return []byte(s), nil
	case ListRBACResourceResource_role:
		return []byte(s), nil
	case ListRBACResourceResource_ROLE:
		return []byte(s), nil
	case ListRBACResourceResource_Object:
		return []byte(s), nil
	case ListRBACResourceResource_object:
		return []byte(s), nil
	case ListRBACResourceResource_OBJECT:
		return []byte(s), nil
	case ListRBACResourceResource_User:
		return []byte(s), nil
	case ListRBACResourceResource_user:
		return []byte(s), nil
	case ListRBACResourceResource_USER:
		return []byte(s), nil
	case ListRBACResourceResource_Operation:
		return []byte(s), nil
	case ListRBACResourceResource_operation:
		return []byte(s), nil
	case ListRBACResourceResource_OPERATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRBACResourceResource) UnmarshalText(data []byte) error {
	switch ListRBACResourceResource(data) {
	case ListRBACResourceResource_Role:
		*s = ListRBACResourceResource_Role
		return nil
	case ListRBACResourceResource_role:
		*s = ListRBACResourceResource_role
		return nil
	case ListRBACResourceResource_ROLE:
		*s = ListRBACResourceResource_ROLE
		return nil
	case ListRBACResourceResource_Object:
		*s = ListRBACResourceResource_Object
		return nil
	case ListRBACResourceResource_object:
		*s = ListRBACResourceResource_object
		return nil
	case ListRBACResourceResource_OBJECT:
		*s = ListRBACResourceResource_OBJECT
		return nil
	case ListRBACResourceResource_User:
		*s = ListRBACResourceResource_User
		return nil
	case ListRBACResourceResource_user:
		*s = ListRBACResourceResource_user
		return nil
	case ListRBACResourceResource_USER:
		*s = ListRBACResourceResource_USER
		return nil
	case ListRBACResourceResource_Operation:
		*s = ListRBACResourceResource_Operation
		return nil
	case ListRBACResourceResource_operation:
		*s = ListRBACResourceResource_operation
		return nil
	case ListRBACResourceResource_OPERATION:
		*s = ListRBACResourceResource_OPERATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListRBACResourceUnauthorized is response for ListRBACResource operation.
type ListRBACResourceUnauthorized struct{}

func (*ListRBACResourceUnauthorized) listRBACResourceRes() {}

type ListTablesBadRequest Error

func (*ListTablesBadRequest) listTablesRes() {}

// ListTablesForbidden is response for ListTables operation.
type ListTablesForbidden struct{}

func (*ListTablesForbidden) listTablesRes() {}

type ListTablesNotFound Error

func (*ListTablesNotFound) listTablesRes() {}

// ListTablesUnauthorized is response for ListTables operation.
type ListTablesUnauthorized struct{}

func (*ListTablesUnauthorized) listTablesRes() {}

// LoginSessionForbidden is response for LoginSession operation.
type LoginSessionForbidden struct{}

func (*LoginSessionForbidden) loginSessionRes() {}

// LoginSessionUnauthorized is response for LoginSession operation.
type LoginSessionUnauthorized struct{}

func (*LoginSessionUnauthorized) loginSessionRes() {}

type LogoutSessionCompatBadRequest Error

func (*LogoutSessionCompatBadRequest) logoutSessionCompatRes() {}

type LogoutSessionCompatNotFound Error

func (*LogoutSessionCompatNotFound) logoutSessionCompatRes() {}

// LogoutSessionCompatOK is response for LogoutSessionCompat operation.
type LogoutSessionCompatOK struct{}

func (*LogoutSessionCompatOK) logoutSessionCompatRes() {}

type Map string

// Ref: #/components/schemas/MapField
type MapField struct {
	Name        OptMapFieldName        `json:"name"`
	ShortName   OptMapFieldShortName   `json:"shortName"`
	ContentType OptMapFieldContentType `json:"contentType"`
	Charset     OptMapFieldCharset     `json:"charset"`
	File        OptMapFieldFile        `json:"file"`
	FormatType  OptMapFieldFormatType  `json:"formatType"`
	Length      OptMapFieldLength      `json:"length"`
	FieldType   OptMapFieldFieldType   `json:"fieldType"`
}

// GetName returns the value of Name.
func (s *MapField) GetName() OptMapFieldName {
	return s.Name
}

// GetShortName returns the value of ShortName.
func (s *MapField) GetShortName() OptMapFieldShortName {
	return s.ShortName
}

// GetContentType returns the value of ContentType.
func (s *MapField) GetContentType() OptMapFieldContentType {
	return s.ContentType
}

// GetCharset returns the value of Charset.
func (s *MapField) GetCharset() OptMapFieldCharset {
	return s.Charset
}

// GetFile returns the value of File.
func (s *MapField) GetFile() OptMapFieldFile {
	return s.File
}

// GetFormatType returns the value of FormatType.
func (s *MapField) GetFormatType() OptMapFieldFormatType {
	return s.FormatType
}

// GetLength returns the value of Length.
func (s *MapField) GetLength() OptMapFieldLength {
	return s.Length
}

// GetFieldType returns the value of FieldType.
func (s *MapField) GetFieldType() OptMapFieldFieldType {
	return s.FieldType
}

// SetName sets the value of Name.
func (s *MapField) SetName(val OptMapFieldName) {
	s.Name = val
}

// SetShortName sets the value of ShortName.
func (s *MapField) SetShortName(val OptMapFieldShortName) {
	s.ShortName = val
}

// SetContentType sets the value of ContentType.
func (s *MapField) SetContentType(val OptMapFieldContentType) {
	s.ContentType = val
}

// SetCharset sets the value of Charset.
func (s *MapField) SetCharset(val OptMapFieldCharset) {
	s.Charset = val
}

// SetFile sets the value of File.
func (s *MapField) SetFile(val OptMapFieldFile) {
	s.File = val
}

// SetFormatType sets the value of FormatType.
func (s *MapField) SetFormatType(val OptMapFieldFormatType) {
	s.FormatType = val
}

// SetLength sets the value of Length.
func (s *MapField) SetLength(val OptMapFieldLength) {
	s.Length = val
}

// SetFieldType sets the value of FieldType.
func (s *MapField) SetFieldType(val OptMapFieldFieldType) {
	s.FieldType = val
}

type MapFieldCharset struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldCharset) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldCharset) SetFormat(val OptString) {
	s.Format = val
}

type MapFieldContentType struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldContentType) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldContentType) SetFormat(val OptString) {
	s.Format = val
}

type MapFieldFieldType struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldFieldType) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldFieldType) SetFormat(val OptString) {
	s.Format = val
}

type MapFieldFile struct {
	Format OptInt `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldFile) GetFormat() OptInt {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldFile) SetFormat(val OptInt) {
	s.Format = val
}

type MapFieldFormatType struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldFormatType) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldFormatType) SetFormat(val OptString) {
	s.Format = val
}

type MapFieldLength struct {
	Format OptInt `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldLength) GetFormat() OptInt {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldLength) SetFormat(val OptInt) {
	s.Format = val
}

type MapFieldName struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldName) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldName) SetFormat(val OptString) {
	s.Format = val
}

type MapFieldShortName struct {
	Format OptString `json:"format"`
}

// GetFormat returns the value of Format.
func (s *MapFieldShortName) GetFormat() OptString {
	return s.Format
}

// SetFormat sets the value of Format.
func (s *MapFieldShortName) SetFormat(val OptString) {
	s.Format = val
}

// Ref: #/components/schemas/mapping
type Mapping struct {
	Map    OptMappingMap  `json:"Map"`
	Format *MappingFormat `json:"format"`
}

// GetMap returns the value of Map.
func (s *Mapping) GetMap() OptMappingMap {
	return s.Map
}

// GetFormat returns the value of Format.
func (s *Mapping) GetFormat() *MappingFormat {
	return s.Format
}

// SetMap sets the value of Map.
func (s *Mapping) SetMap(val OptMappingMap) {
	s.Map = val
}

// SetFormat sets the value of Format.
func (s *Mapping) SetFormat(val *MappingFormat) {
	s.Format = val
}

type MappingFormat struct{}

// MappingHeaders wraps Mapping with response headers.
type MappingHeaders struct {
	XToken   OptString
	Response Mapping
}

// GetXToken returns the value of XToken.
func (s *MappingHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *MappingHeaders) GetResponse() Mapping {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *MappingHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *MappingHeaders) SetResponse(val Mapping) {
	s.Response = val
}

func (*MappingHeaders) getMapMetadataRes() {}

// Ref: #/components/schemas/mappingLocation
type MappingLocation struct {
	Target OptString `json:"target"`
	File   OptInt    `json:"file"`
}

// GetTarget returns the value of Target.
func (s *MappingLocation) GetTarget() OptString {
	return s.Target
}

// GetFile returns the value of File.
func (s *MappingLocation) GetFile() OptInt {
	return s.File
}

// SetTarget sets the value of Target.
func (s *MappingLocation) SetTarget(val OptString) {
	s.Target = val
}

// SetFile sets the value of File.
func (s *MappingLocation) SetFile(val OptInt) {
	s.File = val
}

type MappingMap struct {
	Name         OptString          `json:"name"`
	LastModified OptDateTime        `json:"lastModified"`
	Isn          OptInt             `json:"isn"`
	Definition   OptMappingLocation `json:"definition"`
	Data         OptMappingLocation `json:"data"`
	Fields       []MapField         `json:"fields"`
}

// GetName returns the value of Name.
func (s *MappingMap) GetName() OptString {
	return s.Name
}

// GetLastModified returns the value of LastModified.
func (s *MappingMap) GetLastModified() OptDateTime {
	return s.LastModified
}

// GetIsn returns the value of Isn.
func (s *MappingMap) GetIsn() OptInt {
	return s.Isn
}

// GetDefinition returns the value of Definition.
func (s *MappingMap) GetDefinition() OptMappingLocation {
	return s.Definition
}

// GetData returns the value of Data.
func (s *MappingMap) GetData() OptMappingLocation {
	return s.Data
}

// GetFields returns the value of Fields.
func (s *MappingMap) GetFields() []MapField {
	return s.Fields
}

// SetName sets the value of Name.
func (s *MappingMap) SetName(val OptString) {
	s.Name = val
}

// SetLastModified sets the value of LastModified.
func (s *MappingMap) SetLastModified(val OptDateTime) {
	s.LastModified = val
}

// SetIsn sets the value of Isn.
func (s *MappingMap) SetIsn(val OptInt) {
	s.Isn = val
}

// SetDefinition sets the value of Definition.
func (s *MappingMap) SetDefinition(val OptMappingLocation) {
	s.Definition = val
}

// SetData sets the value of Data.
func (s *MappingMap) SetData(val OptMappingLocation) {
	s.Data = val
}

// SetFields sets the value of Fields.
func (s *MappingMap) SetFields(val []MapField) {
	s.Fields = val
}

// Maps definition.
// Ref: #/components/schemas/Maps
type Maps struct {
	Maps []Map `json:"Maps"`
}

// GetMaps returns the value of Maps.
func (s *Maps) GetMaps() []Map {
	return s.Maps
}

// SetMaps sets the value of Maps.
func (s *Maps) SetMaps(val []Map) {
	s.Maps = val
}

func (*Maps) getMapsRes()       {}
func (*Maps) listModellingRes() {}
func (*Maps) listTablesRes()    {}

// NewOptActivityStatsStatistics returns new OptActivityStatsStatistics with value set to v.
func NewOptActivityStatsStatistics(v ActivityStatsStatistics) OptActivityStatsStatistics {
	return OptActivityStatsStatistics{
		Value: v,
		Set:   true,
	}
}

// OptActivityStatsStatistics is optional ActivityStatsStatistics.
type OptActivityStatsStatistics struct {
	Value ActivityStatsStatistics
	Set   bool
}

// IsSet returns true if OptActivityStatsStatistics was set.
func (o OptActivityStatsStatistics) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityStatsStatistics) Reset() {
	var v ActivityStatsStatistics
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityStatsStatistics) SetTo(v ActivityStatsStatistics) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityStatsStatistics) Get() (v ActivityStatsStatistics, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityStatsStatistics) Or(d ActivityStatsStatistics) ActivityStatsStatistics {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterConfig returns new OptClusterConfig with value set to v.
func NewOptClusterConfig(v ClusterConfig) OptClusterConfig {
	return OptClusterConfig{
		Value: v,
		Set:   true,
	}
}

// OptClusterConfig is optional ClusterConfig.
type OptClusterConfig struct {
	Value ClusterConfig
	Set   bool
}

// IsSet returns true if OptClusterConfig was set.
func (o OptClusterConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterConfig) Reset() {
	var v ClusterConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterConfig) SetTo(v ClusterConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterConfig) Get() (v ClusterConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterConfig) Or(d ClusterConfig) ClusterConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigDatabaseAccess returns new OptConfigDatabaseAccess with value set to v.
func NewOptConfigDatabaseAccess(v ConfigDatabaseAccess) OptConfigDatabaseAccess {
	return OptConfigDatabaseAccess{
		Value: v,
		Set:   true,
	}
}

// OptConfigDatabaseAccess is optional ConfigDatabaseAccess.
type OptConfigDatabaseAccess struct {
	Value ConfigDatabaseAccess
	Set   bool
}

// IsSet returns true if OptConfigDatabaseAccess was set.
func (o OptConfigDatabaseAccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigDatabaseAccess) Reset() {
	var v ConfigDatabaseAccess
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigDatabaseAccess) SetTo(v ConfigDatabaseAccess) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigDatabaseAccess) Get() (v ConfigDatabaseAccess, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigDatabaseAccess) Or(d ConfigDatabaseAccess) ConfigDatabaseAccess {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigMapping returns new OptConfigMapping with value set to v.
func NewOptConfigMapping(v ConfigMapping) OptConfigMapping {
	return OptConfigMapping{
		Value: v,
		Set:   true,
	}
}

// OptConfigMapping is optional ConfigMapping.
type OptConfigMapping struct {
	Value ConfigMapping
	Set   bool
}

// IsSet returns true if OptConfigMapping was set.
func (o OptConfigMapping) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigMapping) Reset() {
	var v ConfigMapping
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigMapping) SetTo(v ConfigMapping) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigMapping) Get() (v ConfigMapping, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigMapping) Or(d ConfigMapping) ConfigMapping {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigMetrics returns new OptConfigMetrics with value set to v.
func NewOptConfigMetrics(v ConfigMetrics) OptConfigMetrics {
	return OptConfigMetrics{
		Value: v,
		Set:   true,
	}
}

// OptConfigMetrics is optional ConfigMetrics.
type OptConfigMetrics struct {
	Value ConfigMetrics
	Set   bool
}

// IsSet returns true if OptConfigMetrics was set.
func (o OptConfigMetrics) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigMetrics) Reset() {
	var v ConfigMetrics
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigMetrics) SetTo(v ConfigMetrics) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigMetrics) Get() (v ConfigMetrics, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigMetrics) Or(d ConfigMetrics) ConfigMetrics {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigModule returns new OptConfigModule with value set to v.
func NewOptConfigModule(v ConfigModule) OptConfigModule {
	return OptConfigModule{
		Value: v,
		Set:   true,
	}
}

// OptConfigModule is optional ConfigModule.
type OptConfigModule struct {
	Value ConfigModule
	Set   bool
}

// IsSet returns true if OptConfigModule was set.
func (o OptConfigModule) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigModule) Reset() {
	var v ConfigModule
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigModule) SetTo(v ConfigModule) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigModule) Get() (v ConfigModule, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigModule) Or(d ConfigModule) ConfigModule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigServer returns new OptConfigServer with value set to v.
func NewOptConfigServer(v ConfigServer) OptConfigServer {
	return OptConfigServer{
		Value: v,
		Set:   true,
	}
}

// OptConfigServer is optional ConfigServer.
type OptConfigServer struct {
	Value ConfigServer
	Set   bool
}

// IsSet returns true if OptConfigServer was set.
func (o OptConfigServer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigServer) Reset() {
	var v ConfigServer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigServer) SetTo(v ConfigServer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigServer) Get() (v ConfigServer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigServer) Or(d ConfigServer) ConfigServer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigServerLogLocation returns new OptConfigServerLogLocation with value set to v.
func NewOptConfigServerLogLocation(v ConfigServerLogLocation) OptConfigServerLogLocation {
	return OptConfigServerLogLocation{
		Value: v,
		Set:   true,
	}
}

// OptConfigServerLogLocation is optional ConfigServerLogLocation.
type OptConfigServerLogLocation struct {
	Value ConfigServerLogLocation
	Set   bool
}

// IsSet returns true if OptConfigServerLogLocation was set.
func (o OptConfigServerLogLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigServerLogLocation) Reset() {
	var v ConfigServerLogLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigServerLogLocation) SetTo(v ConfigServerLogLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigServerLogLocation) Get() (v ConfigServerLogLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigServerLogLocation) Or(d ConfigServerLogLocation) ConfigServerLogLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseConfig returns new OptDatabaseConfig with value set to v.
func NewOptDatabaseConfig(v DatabaseConfig) OptDatabaseConfig {
	return OptDatabaseConfig{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseConfig is optional DatabaseConfig.
type OptDatabaseConfig struct {
	Value DatabaseConfig
	Set   bool
}

// IsSet returns true if OptDatabaseConfig was set.
func (o OptDatabaseConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseConfig) Reset() {
	var v DatabaseConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseConfig) SetTo(v DatabaseConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseConfig) Get() (v DatabaseConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseConfig) Or(d DatabaseConfig) DatabaseConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseStatusDatabase returns new OptDatabaseStatusDatabase with value set to v.
func NewOptDatabaseStatusDatabase(v DatabaseStatusDatabase) OptDatabaseStatusDatabase {
	return OptDatabaseStatusDatabase{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseStatusDatabase is optional DatabaseStatusDatabase.
type OptDatabaseStatusDatabase struct {
	Value DatabaseStatusDatabase
	Set   bool
}

// IsSet returns true if OptDatabaseStatusDatabase was set.
func (o OptDatabaseStatusDatabase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseStatusDatabase) Reset() {
	var v DatabaseStatusDatabase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseStatusDatabase) SetTo(v DatabaseStatusDatabase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseStatusDatabase) Get() (v DatabaseStatusDatabase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseStatusDatabase) Or(d DatabaseStatusDatabase) DatabaseStatusDatabase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorError returns new OptErrorError with value set to v.
func NewOptErrorError(v ErrorError) OptErrorError {
	return OptErrorError{
		Value: v,
		Set:   true,
	}
}

// OptErrorError is optional ErrorError.
type OptErrorError struct {
	Value ErrorError
	Set   bool
}

// IsSet returns true if OptErrorError was set.
func (o OptErrorError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorError) Reset() {
	var v ErrorError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorError) SetTo(v ErrorError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorError) Get() (v ErrorError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorError) Or(d ErrorError) ErrorError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPermissionList returns new OptGetPermissionList with value set to v.
func NewOptGetPermissionList(v GetPermissionList) OptGetPermissionList {
	return OptGetPermissionList{
		Value: v,
		Set:   true,
	}
}

// OptGetPermissionList is optional GetPermissionList.
type OptGetPermissionList struct {
	Value GetPermissionList
	Set   bool
}

// IsSet returns true if OptGetPermissionList was set.
func (o OptGetPermissionList) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPermissionList) Reset() {
	var v GetPermissionList
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPermissionList) SetTo(v GetPermissionList) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPermissionList) Get() (v GetPermissionList, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPermissionList) Or(d GetPermissionList) GetPermissionList {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInsertMapFileRecordsReq returns new OptInsertMapFileRecordsReq with value set to v.
func NewOptInsertMapFileRecordsReq(v InsertMapFileRecordsReq) OptInsertMapFileRecordsReq {
	return OptInsertMapFileRecordsReq{
		Value: v,
		Set:   true,
	}
}

// OptInsertMapFileRecordsReq is optional InsertMapFileRecordsReq.
type OptInsertMapFileRecordsReq struct {
	Value InsertMapFileRecordsReq
	Set   bool
}

// IsSet returns true if OptInsertMapFileRecordsReq was set.
func (o OptInsertMapFileRecordsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInsertMapFileRecordsReq) Reset() {
	var v InsertMapFileRecordsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInsertMapFileRecordsReq) SetTo(v InsertMapFileRecordsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInsertMapFileRecordsReq) Get() (v InsertMapFileRecordsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInsertMapFileRecordsReq) Or(d InsertMapFileRecordsReq) InsertMapFileRecordsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInsertRecordReq returns new OptInsertRecordReq with value set to v.
func NewOptInsertRecordReq(v InsertRecordReq) OptInsertRecordReq {
	return OptInsertRecordReq{
		Value: v,
		Set:   true,
	}
}

// OptInsertRecordReq is optional InsertRecordReq.
type OptInsertRecordReq struct {
	Value InsertRecordReq
	Set   bool
}

// IsSet returns true if OptInsertRecordReq was set.
func (o OptInsertRecordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInsertRecordReq) Reset() {
	var v InsertRecordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInsertRecordReq) SetTo(v InsertRecordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInsertRecordReq) Get() (v InsertRecordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInsertRecordReq) Or(d InsertRecordReq) InsertRecordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJob returns new OptJob with value set to v.
func NewOptJob(v Job) OptJob {
	return OptJob{
		Value: v,
		Set:   true,
	}
}

// OptJob is optional Job.
type OptJob struct {
	Value Job
	Set   bool
}

// IsSet returns true if OptJob was set.
func (o OptJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJob) Reset() {
	var v Job
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJob) SetTo(v Job) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJob) Get() (v Job, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJob) Or(d Job) Job {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobDefinition returns new OptJobDefinition with value set to v.
func NewOptJobDefinition(v JobDefinition) OptJobDefinition {
	return OptJobDefinition{
		Value: v,
		Set:   true,
	}
}

// OptJobDefinition is optional JobDefinition.
type OptJobDefinition struct {
	Value JobDefinition
	Set   bool
}

// IsSet returns true if OptJobDefinition was set.
func (o OptJobDefinition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobDefinition) Reset() {
	var v JobDefinition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobDefinition) SetTo(v JobDefinition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobDefinition) Get() (v JobDefinition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobDefinition) Or(d JobDefinition) JobDefinition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobDescription returns new OptJobDescription with value set to v.
func NewOptJobDescription(v JobDescription) OptJobDescription {
	return OptJobDescription{
		Value: v,
		Set:   true,
	}
}

// OptJobDescription is optional JobDescription.
type OptJobDescription struct {
	Value JobDescription
	Set   bool
}

// IsSet returns true if OptJobDescription was set.
func (o OptJobDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobDescription) Reset() {
	var v JobDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobDescription) SetTo(v JobDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobDescription) Get() (v JobDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobDescription) Or(d JobDescription) JobDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobResultJobResult returns new OptJobResultJobResult with value set to v.
func NewOptJobResultJobResult(v JobResultJobResult) OptJobResultJobResult {
	return OptJobResultJobResult{
		Value: v,
		Set:   true,
	}
}

// OptJobResultJobResult is optional JobResultJobResult.
type OptJobResultJobResult struct {
	Value JobResultJobResult
	Set   bool
}

// IsSet returns true if OptJobResultJobResult was set.
func (o OptJobResultJobResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobResultJobResult) Reset() {
	var v JobResultJobResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobResultJobResult) SetTo(v JobResultJobResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobResultJobResult) Get() (v JobResultJobResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobResultJobResult) Or(d JobResultJobResult) JobResultJobResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobStatusResponseStatus returns new OptJobStatusResponseStatus with value set to v.
func NewOptJobStatusResponseStatus(v JobStatusResponseStatus) OptJobStatusResponseStatus {
	return OptJobStatusResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptJobStatusResponseStatus is optional JobStatusResponseStatus.
type OptJobStatusResponseStatus struct {
	Value JobStatusResponseStatus
	Set   bool
}

// IsSet returns true if OptJobStatusResponseStatus was set.
func (o OptJobStatusResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobStatusResponseStatus) Reset() {
	var v JobStatusResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobStatusResponseStatus) SetTo(v JobStatusResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobStatusResponseStatus) Get() (v JobStatusResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobStatusResponseStatus) Or(d JobStatusResponseStatus) JobStatusResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobStore returns new OptJobStore with value set to v.
func NewOptJobStore(v JobStore) OptJobStore {
	return OptJobStore{
		Value: v,
		Set:   true,
	}
}

// OptJobStore is optional JobStore.
type OptJobStore struct {
	Value JobStore
	Set   bool
}

// IsSet returns true if OptJobStore was set.
func (o OptJobStore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobStore) Reset() {
	var v JobStore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobStore) SetTo(v JobStore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobStore) Get() (v JobStore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobStore) Or(d JobStore) JobStore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldCharset returns new OptMapFieldCharset with value set to v.
func NewOptMapFieldCharset(v MapFieldCharset) OptMapFieldCharset {
	return OptMapFieldCharset{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldCharset is optional MapFieldCharset.
type OptMapFieldCharset struct {
	Value MapFieldCharset
	Set   bool
}

// IsSet returns true if OptMapFieldCharset was set.
func (o OptMapFieldCharset) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldCharset) Reset() {
	var v MapFieldCharset
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldCharset) SetTo(v MapFieldCharset) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldCharset) Get() (v MapFieldCharset, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldCharset) Or(d MapFieldCharset) MapFieldCharset {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldContentType returns new OptMapFieldContentType with value set to v.
func NewOptMapFieldContentType(v MapFieldContentType) OptMapFieldContentType {
	return OptMapFieldContentType{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldContentType is optional MapFieldContentType.
type OptMapFieldContentType struct {
	Value MapFieldContentType
	Set   bool
}

// IsSet returns true if OptMapFieldContentType was set.
func (o OptMapFieldContentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldContentType) Reset() {
	var v MapFieldContentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldContentType) SetTo(v MapFieldContentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldContentType) Get() (v MapFieldContentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldContentType) Or(d MapFieldContentType) MapFieldContentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldFieldType returns new OptMapFieldFieldType with value set to v.
func NewOptMapFieldFieldType(v MapFieldFieldType) OptMapFieldFieldType {
	return OptMapFieldFieldType{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldFieldType is optional MapFieldFieldType.
type OptMapFieldFieldType struct {
	Value MapFieldFieldType
	Set   bool
}

// IsSet returns true if OptMapFieldFieldType was set.
func (o OptMapFieldFieldType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldFieldType) Reset() {
	var v MapFieldFieldType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldFieldType) SetTo(v MapFieldFieldType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldFieldType) Get() (v MapFieldFieldType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldFieldType) Or(d MapFieldFieldType) MapFieldFieldType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldFile returns new OptMapFieldFile with value set to v.
func NewOptMapFieldFile(v MapFieldFile) OptMapFieldFile {
	return OptMapFieldFile{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldFile is optional MapFieldFile.
type OptMapFieldFile struct {
	Value MapFieldFile
	Set   bool
}

// IsSet returns true if OptMapFieldFile was set.
func (o OptMapFieldFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldFile) Reset() {
	var v MapFieldFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldFile) SetTo(v MapFieldFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldFile) Get() (v MapFieldFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldFile) Or(d MapFieldFile) MapFieldFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldFormatType returns new OptMapFieldFormatType with value set to v.
func NewOptMapFieldFormatType(v MapFieldFormatType) OptMapFieldFormatType {
	return OptMapFieldFormatType{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldFormatType is optional MapFieldFormatType.
type OptMapFieldFormatType struct {
	Value MapFieldFormatType
	Set   bool
}

// IsSet returns true if OptMapFieldFormatType was set.
func (o OptMapFieldFormatType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldFormatType) Reset() {
	var v MapFieldFormatType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldFormatType) SetTo(v MapFieldFormatType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldFormatType) Get() (v MapFieldFormatType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldFormatType) Or(d MapFieldFormatType) MapFieldFormatType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldLength returns new OptMapFieldLength with value set to v.
func NewOptMapFieldLength(v MapFieldLength) OptMapFieldLength {
	return OptMapFieldLength{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldLength is optional MapFieldLength.
type OptMapFieldLength struct {
	Value MapFieldLength
	Set   bool
}

// IsSet returns true if OptMapFieldLength was set.
func (o OptMapFieldLength) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldLength) Reset() {
	var v MapFieldLength
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldLength) SetTo(v MapFieldLength) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldLength) Get() (v MapFieldLength, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldLength) Or(d MapFieldLength) MapFieldLength {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldName returns new OptMapFieldName with value set to v.
func NewOptMapFieldName(v MapFieldName) OptMapFieldName {
	return OptMapFieldName{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldName is optional MapFieldName.
type OptMapFieldName struct {
	Value MapFieldName
	Set   bool
}

// IsSet returns true if OptMapFieldName was set.
func (o OptMapFieldName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldName) Reset() {
	var v MapFieldName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldName) SetTo(v MapFieldName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldName) Get() (v MapFieldName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldName) Or(d MapFieldName) MapFieldName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapFieldShortName returns new OptMapFieldShortName with value set to v.
func NewOptMapFieldShortName(v MapFieldShortName) OptMapFieldShortName {
	return OptMapFieldShortName{
		Value: v,
		Set:   true,
	}
}

// OptMapFieldShortName is optional MapFieldShortName.
type OptMapFieldShortName struct {
	Value MapFieldShortName
	Set   bool
}

// IsSet returns true if OptMapFieldShortName was set.
func (o OptMapFieldShortName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapFieldShortName) Reset() {
	var v MapFieldShortName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapFieldShortName) SetTo(v MapFieldShortName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapFieldShortName) Get() (v MapFieldShortName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapFieldShortName) Or(d MapFieldShortName) MapFieldShortName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMappingLocation returns new OptMappingLocation with value set to v.
func NewOptMappingLocation(v MappingLocation) OptMappingLocation {
	return OptMappingLocation{
		Value: v,
		Set:   true,
	}
}

// OptMappingLocation is optional MappingLocation.
type OptMappingLocation struct {
	Value MappingLocation
	Set   bool
}

// IsSet returns true if OptMappingLocation was set.
func (o OptMappingLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMappingLocation) Reset() {
	var v MappingLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMappingLocation) SetTo(v MappingLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMappingLocation) Get() (v MappingLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMappingLocation) Or(d MappingLocation) MappingLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMappingMap returns new OptMappingMap with value set to v.
func NewOptMappingMap(v MappingMap) OptMappingMap {
	return OptMappingMap{
		Value: v,
		Set:   true,
	}
}

// OptMappingMap is optional MappingMap.
type OptMappingMap struct {
	Value MappingMap
	Set   bool
}

// IsSet returns true if OptMappingMap was set.
func (o OptMappingMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMappingMap) Reset() {
	var v MappingMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMappingMap) SetTo(v MappingMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMappingMap) Get() (v MappingMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMappingMap) Or(d MappingMap) MappingMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSQLQueryBatch returns new OptSQLQueryBatch with value set to v.
func NewOptSQLQueryBatch(v SQLQueryBatch) OptSQLQueryBatch {
	return OptSQLQueryBatch{
		Value: v,
		Set:   true,
	}
}

// OptSQLQueryBatch is optional SQLQueryBatch.
type OptSQLQueryBatch struct {
	Value SQLQueryBatch
	Set   bool
}

// IsSet returns true if OptSQLQueryBatch was set.
func (o OptSQLQueryBatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSQLQueryBatch) Reset() {
	var v SQLQueryBatch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSQLQueryBatch) SetTo(v SQLQueryBatch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSQLQueryBatch) Get() (v SQLQueryBatch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSQLQueryBatch) Or(d SQLQueryBatch) SQLQueryBatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionsSession returns new OptSessionsSession with value set to v.
func NewOptSessionsSession(v SessionsSession) OptSessionsSession {
	return OptSessionsSession{
		Value: v,
		Set:   true,
	}
}

// OptSessionsSession is optional SessionsSession.
type OptSessionsSession struct {
	Value SessionsSession
	Set   bool
}

// IsSet returns true if OptSessionsSession was set.
func (o OptSessionsSession) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionsSession) Reset() {
	var v SessionsSession
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionsSession) SetTo(v SessionsSession) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionsSession) Get() (v SessionsSession, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionsSession) Or(d SessionsSession) SessionsSession {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatusResponseStatus returns new OptStatusResponseStatus with value set to v.
func NewOptStatusResponseStatus(v StatusResponseStatus) OptStatusResponseStatus {
	return OptStatusResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptStatusResponseStatus is optional StatusResponseStatus.
type OptStatusResponseStatus struct {
	Value StatusResponseStatus
	Set   bool
}

// IsSet returns true if OptStatusResponseStatus was set.
func (o OptStatusResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatusResponseStatus) Reset() {
	var v StatusResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatusResponseStatus) SetTo(v StatusResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatusResponseStatus) Get() (v StatusResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatusResponseStatus) Or(d StatusResponseStatus) StatusResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateRecordsByFieldsReq returns new OptUpdateRecordsByFieldsReq with value set to v.
func NewOptUpdateRecordsByFieldsReq(v UpdateRecordsByFieldsReq) OptUpdateRecordsByFieldsReq {
	return OptUpdateRecordsByFieldsReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateRecordsByFieldsReq is optional UpdateRecordsByFieldsReq.
type OptUpdateRecordsByFieldsReq struct {
	Value UpdateRecordsByFieldsReq
	Set   bool
}

// IsSet returns true if OptUpdateRecordsByFieldsReq was set.
func (o OptUpdateRecordsByFieldsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateRecordsByFieldsReq) Reset() {
	var v UpdateRecordsByFieldsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateRecordsByFieldsReq) SetTo(v UpdateRecordsByFieldsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateRecordsByFieldsReq) Get() (v UpdateRecordsByFieldsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateRecordsByFieldsReq) Or(d UpdateRecordsByFieldsReq) UpdateRecordsByFieldsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PostDatabaseForbidden is response for PostDatabase operation.
type PostDatabaseForbidden struct{}

func (*PostDatabaseForbidden) postDatabaseRes() {}

// PostDatabaseUnauthorized is response for PostDatabase operation.
type PostDatabaseUnauthorized struct{}

func (*PostDatabaseUnauthorized) postDatabaseRes() {}

type PostJobBadRequest Error

func (*PostJobBadRequest) postJobRes() {}

// PostJobForbidden is response for PostJob operation.
type PostJobForbidden struct{}

func (*PostJobForbidden) postJobRes() {}

type PostJobNotFound Error

func (*PostJobNotFound) postJobRes() {}

type PostJobReqEmptyBody struct{}

func (*PostJobReqEmptyBody) postJobReq() {}

type PostJobReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PostJobReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PostJobReqTextPlain) postJobReq() {}

// PostJobUnauthorized is response for PostJob operation.
type PostJobUnauthorized struct{}

func (*PostJobUnauthorized) postJobRes() {}

// PushLoginSessionForbidden is response for PushLoginSession operation.
type PushLoginSessionForbidden struct{}

func (*PushLoginSessionForbidden) pushLoginSessionRes() {}

// PushLoginSessionUnauthorized is response for PushLoginSession operation.
type PushLoginSessionUnauthorized struct{}

func (*PushLoginSessionUnauthorized) pushLoginSessionRes() {}

// PutDatabaseResourceForbidden is response for PutDatabaseResource operation.
type PutDatabaseResourceForbidden struct{}

func (*PutDatabaseResourceForbidden) putDatabaseResourceRes() {}

// PutDatabaseResourceUnauthorized is response for PutDatabaseResource operation.
type PutDatabaseResourceUnauthorized struct{}

func (*PutDatabaseResourceUnauthorized) putDatabaseResourceRes() {}

// RemovePermissionForbidden is response for RemovePermission operation.
type RemovePermissionForbidden struct{}

func (*RemovePermissionForbidden) removePermissionRes() {}

// RemovePermissionUnauthorized is response for RemovePermission operation.
type RemovePermissionUnauthorized struct{}

func (*RemovePermissionUnauthorized) removePermissionRes() {}

type RemoveSessionCompatBadRequest Error

func (*RemoveSessionCompatBadRequest) removeSessionCompatRes() {}

type RemoveSessionCompatNotFound Error

func (*RemoveSessionCompatNotFound) removeSessionCompatRes() {}

// RemoveSessionCompatOK is response for RemoveSessionCompat operation.
type RemoveSessionCompatOK struct{}

func (*RemoveSessionCompatOK) removeSessionCompatRes() {}

// Ref: #/components/schemas/Response
type Response struct {
	MapName     OptString             `json:"MapName"`
	FileRecords OptInt                `json:"FileRecords"`
	NrRecords   OptInt                `json:"NrRecords"`
	FieldNames  []string              `json:"FieldNames"`
	Records     []ResponseRecordsItem `json:"Records"`
}

// GetMapName returns the value of MapName.
func (s *Response) GetMapName() OptString {
	return s.MapName
}

// GetFileRecords returns the value of FileRecords.
func (s *Response) GetFileRecords() OptInt {
	return s.FileRecords
}

// GetNrRecords returns the value of NrRecords.
func (s *Response) GetNrRecords() OptInt {
	return s.NrRecords
}

// GetFieldNames returns the value of FieldNames.
func (s *Response) GetFieldNames() []string {
	return s.FieldNames
}

// GetRecords returns the value of Records.
func (s *Response) GetRecords() []ResponseRecordsItem {
	return s.Records
}

// SetMapName sets the value of MapName.
func (s *Response) SetMapName(val OptString) {
	s.MapName = val
}

// SetFileRecords sets the value of FileRecords.
func (s *Response) SetFileRecords(val OptInt) {
	s.FileRecords = val
}

// SetNrRecords sets the value of NrRecords.
func (s *Response) SetNrRecords(val OptInt) {
	s.NrRecords = val
}

// SetFieldNames sets the value of FieldNames.
func (s *Response) SetFieldNames(val []string) {
	s.FieldNames = val
}

// SetRecords sets the value of Records.
func (s *Response) SetRecords(val []ResponseRecordsItem) {
	s.Records = val
}

func (*Response) searchModellingRes() {}
func (*Response) searchTableRes()     {}
func (*Response) triggerJobRes()      {}

// ResponseHeaders wraps Response with response headers.
type ResponseHeaders struct {
	XToken   OptString
	Response Response
}

// GetXToken returns the value of XToken.
func (s *ResponseHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *ResponseHeaders) GetResponse() Response {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *ResponseHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *ResponseHeaders) SetResponse(val Response) {
	s.Response = val
}

func (*ResponseHeaders) batchParameterQueryRes()   {}
func (*ResponseHeaders) batchQueryRes()            {}
func (*ResponseHeaders) batchSelectRes()           {}
func (*ResponseHeaders) deleteRecordsSearchedRes() {}
func (*ResponseHeaders) getMapRecordsFieldsRes()   {}
func (*ResponseHeaders) insertRecordRes()          {}
func (*ResponseHeaders) searchRecordsFieldsRes()   {}
func (*ResponseHeaders) updateRecordsByFieldsRes() {}

type ResponseRecordsItem map[string]jx.Raw

func (s *ResponseRecordsItem) init() ResponseRecordsItem {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/SQLQuery
type SQLQuery struct {
	Batch OptSQLQueryBatch `json:"Batch"`
}

// GetBatch returns the value of Batch.
func (s *SQLQuery) GetBatch() OptSQLQueryBatch {
	return s.Batch
}

// SetBatch sets the value of Batch.
func (s *SQLQuery) SetBatch(val OptSQLQueryBatch) {
	s.Batch = val
}

func (*SQLQuery) batchQueryReq() {}

type SQLQueryBatch struct {
	SQL OptString `json:"SQL"`
}

// GetSQL returns the value of SQL.
func (s *SQLQueryBatch) GetSQL() OptString {
	return s.SQL
}

// SetSQL sets the value of SQL.
func (s *SQLQueryBatch) SetSQL(val OptString) {
	s.SQL = val
}

type SearchModellingBadRequest Error

func (*SearchModellingBadRequest) searchModellingRes() {}

// SearchModellingForbidden is response for SearchModelling operation.
type SearchModellingForbidden struct{}

func (*SearchModellingForbidden) searchModellingRes() {}

type SearchModellingNotFound Error

func (*SearchModellingNotFound) searchModellingRes() {}

// SearchModellingUnauthorized is response for SearchModelling operation.
type SearchModellingUnauthorized struct{}

func (*SearchModellingUnauthorized) searchModellingRes() {}

// SearchRecordsFieldsForbidden is response for SearchRecordsFields operation.
type SearchRecordsFieldsForbidden struct{}

func (*SearchRecordsFieldsForbidden) searchRecordsFieldsRes() {}

// SearchRecordsFieldsUnauthorized is response for SearchRecordsFields operation.
type SearchRecordsFieldsUnauthorized struct{}

func (*SearchRecordsFieldsUnauthorized) searchRecordsFieldsRes() {}

type SearchTableBadRequest Error

func (*SearchTableBadRequest) searchTableRes() {}

// SearchTableForbidden is response for SearchTable operation.
type SearchTableForbidden struct{}

func (*SearchTableForbidden) searchTableRes() {}

type SearchTableNotFound Error

func (*SearchTableNotFound) searchTableRes() {}

// SearchTableUnauthorized is response for SearchTable operation.
type SearchTableUnauthorized struct{}

func (*SearchTableUnauthorized) searchTableRes() {}

// Ref: #/components/schemas/Sessions
type Sessions struct {
	Session OptSessionsSession `json:"Session"`
}

// GetSession returns the value of Session.
func (s *Sessions) GetSession() OptSessionsSession {
	return s.Session
}

// SetSession sets the value of Session.
func (s *Sessions) SetSession(val OptSessionsSession) {
	s.Session = val
}

func (*Sessions) getDatabaseSessionsRes() {}

type SessionsSession struct {
	UserQueueEntry []SessionsSessionUserQueueEntryItem `json:"UserQueueEntry"`
}

// GetUserQueueEntry returns the value of UserQueueEntry.
func (s *SessionsSession) GetUserQueueEntry() []SessionsSessionUserQueueEntryItem {
	return s.UserQueueEntry
}

// SetUserQueueEntry sets the value of UserQueueEntry.
func (s *SessionsSession) SetUserQueueEntry(val []SessionsSessionUserQueueEntryItem) {
	s.UserQueueEntry = val
}

type SessionsSessionUserQueueEntryItem struct{}

// SetConfigForbidden is response for SetConfig operation.
type SetConfigForbidden struct{}

func (*SetConfigForbidden) setConfigRes() {}

// SetConfigOK is response for SetConfig operation.
type SetConfigOK struct {
	XToken OptString
}

// GetXToken returns the value of XToken.
func (s *SetConfigOK) GetXToken() OptString {
	return s.XToken
}

// SetXToken sets the value of XToken.
func (s *SetConfigOK) SetXToken(val OptString) {
	s.XToken = val
}

func (*SetConfigOK) setConfigRes() {}

type SetConfigReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SetConfigReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SetConfigReqTextPlain) setConfigReq() {}

// SetConfigUnauthorized is response for SetConfig operation.
type SetConfigUnauthorized struct{}

func (*SetConfigUnauthorized) setConfigRes() {}

// SetJobsConfigForbidden is response for SetJobsConfig operation.
type SetJobsConfigForbidden struct{}

func (*SetJobsConfigForbidden) setJobsConfigRes() {}

// SetJobsConfigOK is response for SetJobsConfig operation.
type SetJobsConfigOK struct{}

func (*SetJobsConfigOK) setJobsConfigRes() {}

// SetJobsConfigUnauthorized is response for SetJobsConfig operation.
type SetJobsConfigUnauthorized struct{}

func (*SetJobsConfigUnauthorized) setJobsConfigRes() {}

// ShutdownServerForbidden is response for ShutdownServer operation.
type ShutdownServerForbidden struct{}

func (*ShutdownServerForbidden) shutdownServerRes() {}

// ShutdownServerUnauthorized is response for ShutdownServer operation.
type ShutdownServerUnauthorized struct{}

func (*ShutdownServerUnauthorized) shutdownServerRes() {}

// Ref: #/components/schemas/StatusResponse
type StatusResponse struct {
	Status OptStatusResponseStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *StatusResponse) GetStatus() OptStatusResponseStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *StatusResponse) SetStatus(val OptStatusResponseStatus) {
	s.Status = val
}

func (*StatusResponse) adaptPermissionRes()        {}
func (*StatusResponse) addRBACResourceRes()        {}
func (*StatusResponse) callPostExtendRes()         {}
func (*StatusResponse) createDirectoryRes()        {}
func (*StatusResponse) databaseOperationRes()      {}
func (*StatusResponse) databasePostOperationsRes() {}
func (*StatusResponse) deleteDatabaseRes()         {}
func (*StatusResponse) deleteExtendRes()           {}
func (*StatusResponse) deleteFileLocationRes()     {}
func (*StatusResponse) deleteRBACResourceRes()     {}
func (*StatusResponse) disconnectTCPRes()          {}
func (*StatusResponse) postDatabaseRes()           {}
func (*StatusResponse) postJobRes()                {}
func (*StatusResponse) putDatabaseResourceRes()    {}
func (*StatusResponse) removePermissionRes()       {}
func (*StatusResponse) shutdownServerRes()         {}
func (*StatusResponse) triggerExtendRes()          {}
func (*StatusResponse) uploadFileRes()             {}

type StatusResponseStatus struct {
	Action  OptString  `json:"Action"`
	Code    OptString  `json:"Code"`
	Dbid    OptFloat64 `json:"Dbid"`
	Target  OptString  `json:"Target"`
	Message OptString  `json:"Message"`
}

// GetAction returns the value of Action.
func (s *StatusResponseStatus) GetAction() OptString {
	return s.Action
}

// GetCode returns the value of Code.
func (s *StatusResponseStatus) GetCode() OptString {
	return s.Code
}

// GetDbid returns the value of Dbid.
func (s *StatusResponseStatus) GetDbid() OptFloat64 {
	return s.Dbid
}

// GetTarget returns the value of Target.
func (s *StatusResponseStatus) GetTarget() OptString {
	return s.Target
}

// GetMessage returns the value of Message.
func (s *StatusResponseStatus) GetMessage() OptString {
	return s.Message
}

// SetAction sets the value of Action.
func (s *StatusResponseStatus) SetAction(val OptString) {
	s.Action = val
}

// SetCode sets the value of Code.
func (s *StatusResponseStatus) SetCode(val OptString) {
	s.Code = val
}

// SetDbid sets the value of Dbid.
func (s *StatusResponseStatus) SetDbid(val OptFloat64) {
	s.Dbid = val
}

// SetTarget sets the value of Target.
func (s *StatusResponseStatus) SetTarget(val OptString) {
	s.Target = val
}

// SetMessage sets the value of Message.
func (s *StatusResponseStatus) SetMessage(val OptString) {
	s.Message = val
}

// StoreConfigForbidden is response for StoreConfig operation.
type StoreConfigForbidden struct{}

func (*StoreConfigForbidden) storeConfigRes() {}

// StoreConfigOK is response for StoreConfig operation.
type StoreConfigOK struct {
	XToken OptString
}

// GetXToken returns the value of XToken.
func (s *StoreConfigOK) GetXToken() OptString {
	return s.XToken
}

// SetXToken sets the value of XToken.
func (s *StoreConfigOK) SetXToken(val OptString) {
	s.XToken = val
}

func (*StoreConfigOK) storeConfigRes() {}

// StoreConfigUnauthorized is response for StoreConfig operation.
type StoreConfigUnauthorized struct{}

func (*StoreConfigUnauthorized) storeConfigRes() {}

// Ref: #/components/schemas/StoreResponse
type StoreResponse struct {
	NrStored  OptInt `json:"NrStored"`
	NrDeleted OptInt `json:"NrDeleted"`
	Stored    []int  `json:"Stored"`
}

// GetNrStored returns the value of NrStored.
func (s *StoreResponse) GetNrStored() OptInt {
	return s.NrStored
}

// GetNrDeleted returns the value of NrDeleted.
func (s *StoreResponse) GetNrDeleted() OptInt {
	return s.NrDeleted
}

// GetStored returns the value of Stored.
func (s *StoreResponse) GetStored() []int {
	return s.Stored
}

// SetNrStored sets the value of NrStored.
func (s *StoreResponse) SetNrStored(val OptInt) {
	s.NrStored = val
}

// SetNrDeleted sets the value of NrDeleted.
func (s *StoreResponse) SetNrDeleted(val OptInt) {
	s.NrDeleted = val
}

// SetStored sets the value of Stored.
func (s *StoreResponse) SetStored(val []int) {
	s.Stored = val
}

func (*StoreResponse) updateLobByMapRes() {}

// StoreResponseHeaders wraps StoreResponse with response headers.
type StoreResponseHeaders struct {
	XToken   OptString
	Response StoreResponse
}

// GetXToken returns the value of XToken.
func (s *StoreResponseHeaders) GetXToken() OptString {
	return s.XToken
}

// GetResponse returns the value of Response.
func (s *StoreResponseHeaders) GetResponse() StoreResponse {
	return s.Response
}

// SetXToken sets the value of XToken.
func (s *StoreResponseHeaders) SetXToken(val OptString) {
	s.XToken = val
}

// SetResponse sets the value of Response.
func (s *StoreResponseHeaders) SetResponse(val StoreResponse) {
	s.Response = val
}

func (*StoreResponseHeaders) insertMapFileRecordsRes() {}

// Ref: #/components/schemas/TCP
type TCP struct {
	Entry []TCPentry `json:"Entry"`
}

// GetEntry returns the value of Entry.
func (s *TCP) GetEntry() []TCPentry {
	return s.Entry
}

// SetEntry sets the value of Entry.
func (s *TCP) SetEntry(val []TCPentry) {
	s.Entry = val
}

func (*TCP) getConnectionsRes() {}

// Ref: #/components/schemas/TCPentry
type TCPentry struct {
	ID         OptInt    `json:"ID"`
	RecvID     OptInt    `json:"RecvID"`
	RemoteUser OptString `json:"RemoteUser"`
	RemoteHost OptString `json:"RemoteHost"`
	RemoteIP   OptString `json:"RemoteIP"`
	RemotePort OptInt    `json:"RemotePort"`
}

// GetID returns the value of ID.
func (s *TCPentry) GetID() OptInt {
	return s.ID
}

// GetRecvID returns the value of RecvID.
func (s *TCPentry) GetRecvID() OptInt {
	return s.RecvID
}

// GetRemoteUser returns the value of RemoteUser.
func (s *TCPentry) GetRemoteUser() OptString {
	return s.RemoteUser
}

// GetRemoteHost returns the value of RemoteHost.
func (s *TCPentry) GetRemoteHost() OptString {
	return s.RemoteHost
}

// GetRemoteIP returns the value of RemoteIP.
func (s *TCPentry) GetRemoteIP() OptString {
	return s.RemoteIP
}

// GetRemotePort returns the value of RemotePort.
func (s *TCPentry) GetRemotePort() OptInt {
	return s.RemotePort
}

// SetID sets the value of ID.
func (s *TCPentry) SetID(val OptInt) {
	s.ID = val
}

// SetRecvID sets the value of RecvID.
func (s *TCPentry) SetRecvID(val OptInt) {
	s.RecvID = val
}

// SetRemoteUser sets the value of RemoteUser.
func (s *TCPentry) SetRemoteUser(val OptString) {
	s.RemoteUser = val
}

// SetRemoteHost sets the value of RemoteHost.
func (s *TCPentry) SetRemoteHost(val OptString) {
	s.RemoteHost = val
}

// SetRemoteIP sets the value of RemoteIP.
func (s *TCPentry) SetRemoteIP(val OptString) {
	s.RemoteIP = val
}

// SetRemotePort sets the value of RemotePort.
func (s *TCPentry) SetRemotePort(val OptInt) {
	s.RemotePort = val
}

type TokenCheck struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *TokenCheck) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *TokenCheck) SetAPIKey(val string) {
	s.APIKey = val
}

type TriggerExtendBadRequest Error

func (*TriggerExtendBadRequest) triggerExtendRes() {}

// TriggerExtendForbidden is response for TriggerExtend operation.
type TriggerExtendForbidden struct{}

func (*TriggerExtendForbidden) triggerExtendRes() {}

type TriggerExtendNotFound Error

func (*TriggerExtendNotFound) triggerExtendRes() {}

// TriggerExtendUnauthorized is response for TriggerExtend operation.
type TriggerExtendUnauthorized struct{}

func (*TriggerExtendUnauthorized) triggerExtendRes() {}

type TriggerJobBadRequest Error

func (*TriggerJobBadRequest) triggerJobRes() {}

// TriggerJobForbidden is response for TriggerJob operation.
type TriggerJobForbidden struct{}

func (*TriggerJobForbidden) triggerJobRes() {}

type TriggerJobNotFound Error

func (*TriggerJobNotFound) triggerJobRes() {}

// TriggerJobUnauthorized is response for TriggerJob operation.
type TriggerJobUnauthorized struct{}

func (*TriggerJobUnauthorized) triggerJobRes() {}

// UpdateLobByMapForbidden is response for UpdateLobByMap operation.
type UpdateLobByMapForbidden struct{}

func (*UpdateLobByMapForbidden) updateLobByMapRes() {}

type UpdateLobByMapReqApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UpdateLobByMapReqApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UpdateLobByMapReqApplicationOctetStream) updateLobByMapReq() {}

type UpdateLobByMapReqMultipartFormData struct {
	// Upload raw binary content of field.
	UploadLob ht.MultipartFile `json:"uploadLob"`
}

// GetUploadLob returns the value of UploadLob.
func (s *UpdateLobByMapReqMultipartFormData) GetUploadLob() ht.MultipartFile {
	return s.UploadLob
}

// SetUploadLob sets the value of UploadLob.
func (s *UpdateLobByMapReqMultipartFormData) SetUploadLob(val ht.MultipartFile) {
	s.UploadLob = val
}

func (*UpdateLobByMapReqMultipartFormData) updateLobByMapReq() {}

// UpdateLobByMapUnauthorized is response for UpdateLobByMap operation.
type UpdateLobByMapUnauthorized struct{}

func (*UpdateLobByMapUnauthorized) updateLobByMapRes() {}

// UpdateRecordsByFieldsForbidden is response for UpdateRecordsByFields operation.
type UpdateRecordsByFieldsForbidden struct{}

func (*UpdateRecordsByFieldsForbidden) updateRecordsByFieldsRes() {}

type UpdateRecordsByFieldsReq struct {
	Records []UpdateRecordsByFieldsReqRecordsItem `json:"Records"`
}

// GetRecords returns the value of Records.
func (s *UpdateRecordsByFieldsReq) GetRecords() []UpdateRecordsByFieldsReqRecordsItem {
	return s.Records
}

// SetRecords sets the value of Records.
func (s *UpdateRecordsByFieldsReq) SetRecords(val []UpdateRecordsByFieldsReqRecordsItem) {
	s.Records = val
}

type UpdateRecordsByFieldsReqRecordsItem map[string]jx.Raw

func (s *UpdateRecordsByFieldsReqRecordsItem) init() UpdateRecordsByFieldsReqRecordsItem {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// UpdateRecordsByFieldsUnauthorized is response for UpdateRecordsByFields operation.
type UpdateRecordsByFieldsUnauthorized struct{}

func (*UpdateRecordsByFieldsUnauthorized) updateRecordsByFieldsRes() {}

type UploadFileBadRequest Error

func (*UploadFileBadRequest) uploadFileRes() {}

// UploadFileForbidden is response for UploadFile operation.
type UploadFileForbidden struct{}

func (*UploadFileForbidden) uploadFileRes() {}

type UploadFileNotFound Error

func (*UploadFileNotFound) uploadFileRes() {}

type UploadFileOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadFileOKTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UploadFileOKTextPlain) uploadFileRes() {}

type UploadFileReq struct {
	// Upload file.
	UploadFile ht.MultipartFile `json:"uploadFile"`
}

// GetUploadFile returns the value of UploadFile.
func (s *UploadFileReq) GetUploadFile() ht.MultipartFile {
	return s.UploadFile
}

// SetUploadFile sets the value of UploadFile.
func (s *UploadFileReq) SetUploadFile(val ht.MultipartFile) {
	s.UploadFile = val
}

// UploadFileUnauthorized is response for UploadFile operation.
type UploadFileUnauthorized struct{}

func (*UploadFileUnauthorized) uploadFileRes() {}

// Ref: #/components/schemas/User
type User struct {
	Email      OptString   `json:"email"`
	Name       OptString   `json:"name"`
	Picture    OptString   `json:"Picture"`
	LongName   OptString   `json:"LongName"`
	UUID       OptUUID     `json:"UUID"`
	LastLogin  OptDateTime `json:"LastLogin"`
	Created    OptDateTime `json:"Created"`
	Permission OptString   `json:"Permission"`
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetPicture returns the value of Picture.
func (s *User) GetPicture() OptString {
	return s.Picture
}

// GetLongName returns the value of LongName.
func (s *User) GetLongName() OptString {
	return s.LongName
}

// GetUUID returns the value of UUID.
func (s *User) GetUUID() OptUUID {
	return s.UUID
}

// GetLastLogin returns the value of LastLogin.
func (s *User) GetLastLogin() OptDateTime {
	return s.LastLogin
}

// GetCreated returns the value of Created.
func (s *User) GetCreated() OptDateTime {
	return s.Created
}

// GetPermission returns the value of Permission.
func (s *User) GetPermission() OptString {
	return s.Permission
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetPicture sets the value of Picture.
func (s *User) SetPicture(val OptString) {
	s.Picture = val
}

// SetLongName sets the value of LongName.
func (s *User) SetLongName(val OptString) {
	s.LongName = val
}

// SetUUID sets the value of UUID.
func (s *User) SetUUID(val OptUUID) {
	s.UUID = val
}

// SetLastLogin sets the value of LastLogin.
func (s *User) SetLastLogin(val OptDateTime) {
	s.LastLogin = val
}

// SetCreated sets the value of Created.
func (s *User) SetCreated(val OptDateTime) {
	s.Created = val
}

// SetPermission sets the value of Permission.
func (s *User) SetPermission(val OptString) {
	s.Permission = val
}

func (*User) getUserInfoRes() {}

// Ref: #/components/schemas/Users
type Users struct {
	Users           []UsersUsersItem `json:"Users"`
	ReadPermission  OptString        `json:"readPermission"`
	WritePermission OptString        `json:"writePermission"`
}

// GetUsers returns the value of Users.
func (s *Users) GetUsers() []UsersUsersItem {
	return s.Users
}

// GetReadPermission returns the value of ReadPermission.
func (s *Users) GetReadPermission() OptString {
	return s.ReadPermission
}

// GetWritePermission returns the value of WritePermission.
func (s *Users) GetWritePermission() OptString {
	return s.WritePermission
}

// SetUsers sets the value of Users.
func (s *Users) SetUsers(val []UsersUsersItem) {
	s.Users = val
}

// SetReadPermission sets the value of ReadPermission.
func (s *Users) SetReadPermission(val OptString) {
	s.ReadPermission = val
}

// SetWritePermission sets the value of WritePermission.
func (s *Users) SetWritePermission(val OptString) {
	s.WritePermission = val
}

func (*Users) accessRes() {}

type UsersUsersItem struct {
	Name            OptString `json:"name"`
	ReadPermission  OptString `json:"readPermission"`
	WritePermission OptString `json:"writePermission"`
	Administrator   OptBool   `json:"administrator"`
}

// GetName returns the value of Name.
func (s *UsersUsersItem) GetName() OptString {
	return s.Name
}

// GetReadPermission returns the value of ReadPermission.
func (s *UsersUsersItem) GetReadPermission() OptString {
	return s.ReadPermission
}

// GetWritePermission returns the value of WritePermission.
func (s *UsersUsersItem) GetWritePermission() OptString {
	return s.WritePermission
}

// GetAdministrator returns the value of Administrator.
func (s *UsersUsersItem) GetAdministrator() OptBool {
	return s.Administrator
}

// SetName sets the value of Name.
func (s *UsersUsersItem) SetName(val OptString) {
	s.Name = val
}

// SetReadPermission sets the value of ReadPermission.
func (s *UsersUsersItem) SetReadPermission(val OptString) {
	s.ReadPermission = val
}

// SetWritePermission sets the value of WritePermission.
func (s *UsersUsersItem) SetWritePermission(val OptString) {
	s.WritePermission = val
}

// SetAdministrator sets the value of Administrator.
func (s *UsersUsersItem) SetAdministrator(val OptBool) {
	s.Administrator = val
}

// Ref: #/components/schemas/Versions
type Versions struct {
	Handler []APIHandler `json:"Handler"`
	Product OptString    `json:"Product"`
	Version OptString    `json:"Version"`
}

// GetHandler returns the value of Handler.
func (s *Versions) GetHandler() []APIHandler {
	return s.Handler
}

// GetProduct returns the value of Product.
func (s *Versions) GetProduct() OptString {
	return s.Product
}

// GetVersion returns the value of Version.
func (s *Versions) GetVersion() OptString {
	return s.Version
}

// SetHandler sets the value of Handler.
func (s *Versions) SetHandler(val []APIHandler) {
	s.Handler = val
}

// SetProduct sets the value of Product.
func (s *Versions) SetProduct(val OptString) {
	s.Product = val
}

// SetVersion sets the value of Version.
func (s *Versions) SetVersion(val OptString) {
	s.Version = val
}

func (*Versions) getVersionRes() {}
