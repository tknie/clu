// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// Access implements access operation.
//
// Retrieve the list of users who are allowed to access data.
//
// GET /admin/access/{role}
func (UnimplementedHandler) Access(ctx context.Context, params AccessParams) (r AccessRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AdaptPermission implements adaptPermission operation.
//
// Add RBAC role.
//
// PUT /rest/database/{table}/permission
func (UnimplementedHandler) AdaptPermission(ctx context.Context, params AdaptPermissionParams) (r AdaptPermissionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddAccess implements addAccess operation.
//
// Insert user in the list of users who are allowed to access data.
//
// POST /admin/access/{role}
func (UnimplementedHandler) AddAccess(ctx context.Context, params AddAccessParams) (r AddAccessRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddRBACResource implements addRBACResource operation.
//
// Add permission role.
//
// PUT /rest/database/{table}/permission/{resource}/{name}
func (UnimplementedHandler) AddRBACResource(ctx context.Context, params AddRBACResourceParams) (r AddRBACResourceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddView implements addView operation.
//
// Add configuration in View repositories.
//
// POST /config/views
func (UnimplementedHandler) AddView(ctx context.Context, params AddViewParams) (r AddViewRes, _ error) {
	return r, ht.ErrNotImplemented
}

// BatchQuery implements batchQuery operation.
//
// Call a SQL query batch command posted in body.
//
// POST /rest/batch
func (UnimplementedHandler) BatchQuery(ctx context.Context, req OptSQLQuery) (r BatchQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// BrowseList implements browseList operation.
//
// Retrieves a list of Browseable locations.
//
// GET /rest/file/browse
func (UnimplementedHandler) BrowseList(ctx context.Context) (r BrowseListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// BrowseLocation implements browseLocation operation.
//
// Retrieves a list of files in the defined location.
//
// GET /rest/file/browse/{path}
func (UnimplementedHandler) BrowseLocation(ctx context.Context, params BrowseLocationParams) (r BrowseLocationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDirectory implements createDirectory operation.
//
// Create a new directory.
//
// PUT /rest/file/{path}
func (UnimplementedHandler) CreateDirectory(ctx context.Context, params CreateDirectoryParams) (r CreateDirectoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DatabaseOperation implements databaseOperation operation.
//
// Retrieve the current status of database with the given dbid.
//
// GET /rest/database/{table_operation}
func (UnimplementedHandler) DatabaseOperation(ctx context.Context, params DatabaseOperationParams) (r DatabaseOperationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DatabasePostOperations implements databasePostOperations operation.
//
// Initiate operations on the given dbid.
//
// POST /rest/database/{table_operation}
func (UnimplementedHandler) DatabasePostOperations(ctx context.Context, params DatabasePostOperationsParams) (r DatabasePostOperationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DelAccess implements delAccess operation.
//
// Delete user in the list of users who are allowed to access data.
//
// DELETE /admin/access/{role}
func (UnimplementedHandler) DelAccess(ctx context.Context, params DelAccessParams) (r DelAccessRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDatabase implements deleteDatabase operation.
//
// Delete the database.
//
// DELETE /rest/database/{table_operation}
func (UnimplementedHandler) DeleteDatabase(ctx context.Context, params DeleteDatabaseParams) (r DeleteDatabaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteFileLocation implements deleteFileLocation operation.
//
// Delete the file on the given location.
//
// DELETE /rest/file/{path}
func (UnimplementedHandler) DeleteFileLocation(ctx context.Context, params DeleteFileLocationParams) (r DeleteFileLocationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteJobResult implements deleteJobResult operation.
//
// Delete a specific job result.
//
// DELETE /rest/tasks/{jobName}/{jobId}
func (UnimplementedHandler) DeleteJobResult(ctx context.Context, params DeleteJobResultParams) (r DeleteJobResultRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteRBACResource implements deleteRBACResource operation.
//
// Delete RBAC role.
//
// DELETE /rest/database/{table}/permission/{resource}/{name}
func (UnimplementedHandler) DeleteRBACResource(ctx context.Context, params DeleteRBACResourceParams) (r DeleteRBACResourceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteRecordsSearched implements deleteRecordsSearched operation.
//
// Delete a record with a given search.
//
// DELETE /rest/view/{table}/{search}
func (UnimplementedHandler) DeleteRecordsSearched(ctx context.Context, params DeleteRecordsSearchedParams) (r DeleteRecordsSearchedRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteView implements deleteView operation.
//
// Delete entry in configuration.
//
// DELETE /config/views
func (UnimplementedHandler) DeleteView(ctx context.Context, params DeleteViewParams) (r DeleteViewRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DisconnectTCP implements disconnectTCP operation.
//
// Disconnect connection in the database with the given dbid.
//
// DELETE /rest/database/{table}/connection
func (UnimplementedHandler) DisconnectTCP(ctx context.Context, params DisconnectTCPParams) (r DisconnectTCPRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadFile implements downloadFile operation.
//
// Download a file out of file location.
//
// GET /rest/file/{path}
func (UnimplementedHandler) DownloadFile(ctx context.Context, params DownloadFileParams) (r DownloadFileRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConfig implements getConfig operation.
//
// Get configuration.
//
// GET /config
func (UnimplementedHandler) GetConfig(ctx context.Context) (r GetConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConnections implements getConnections operation.
//
// Retrieve the current TCP connection.
//
// GET /rest/database/{table}/connection
func (UnimplementedHandler) GetConnections(ctx context.Context, params GetConnectionsParams) (r GetConnectionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseSessions implements getDatabaseSessions operation.
//
// Retrieve a list of user queue entries.
//
// GET /rest/database/{table}/sessions
func (UnimplementedHandler) GetDatabaseSessions(ctx context.Context, params GetDatabaseSessionsParams) (r GetDatabaseSessionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseStats implements getDatabaseStats operation.
//
// Retrieve SQL statistics.
//
// GET /rest/database/{table}/stats
func (UnimplementedHandler) GetDatabaseStats(ctx context.Context, params GetDatabaseStatsParams) (r GetDatabaseStatsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabases implements getDatabases operation.
//
// Retrieves a list of databases known by Interface.
//
// GET /rest/database
func (UnimplementedHandler) GetDatabases(ctx context.Context) (r GetDatabasesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEnvironments implements getEnvironments operation.
//
// Retrieves the list of environments.
//
// GET /rest/env
func (UnimplementedHandler) GetEnvironments(ctx context.Context) (r GetEnvironmentsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFields implements getFields operation.
//
// Retrieves all fields of an file.
//
// GET /rest/tables/{table}/fields
func (UnimplementedHandler) GetFields(ctx context.Context, params GetFieldsParams) (r GetFieldsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetImage implements getImage operation.
//
// Retrieves a field of a specific ISN of a Map definition.
//
// GET /image/{table}/{field}/{search}
func (UnimplementedHandler) GetImage(ctx context.Context, params GetImageParams) (r GetImageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetJobExecutionResult implements getJobExecutionResult operation.
//
// Retrieves a specific job result.
//
// GET /rest/tasks/results
func (UnimplementedHandler) GetJobExecutionResult(ctx context.Context, params GetJobExecutionResultParams) (r GetJobExecutionResultRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetJobFullInfo implements getJobFullInfo operation.
//
// Retrieves a full job definition.
//
// GET /rest/tasks/{jobName}
func (UnimplementedHandler) GetJobFullInfo(ctx context.Context, params GetJobFullInfoParams) (r GetJobFullInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetJobResult implements getJobResult operation.
//
// Delete a specific job result.
//
// GET /rest/tasks/{jobName}/{jobId}
func (UnimplementedHandler) GetJobResult(ctx context.Context, params GetJobResultParams) (r GetJobResultRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetJobs implements getJobs operation.
//
// Retrieves a list of jobs known by the Interface.
//
// GET /rest/tasks
func (UnimplementedHandler) GetJobs(ctx context.Context, params GetJobsParams) (r GetJobsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetJobsConfig implements getJobsConfig operation.
//
// Read job configuration section.
//
// GET /config/jobs
func (UnimplementedHandler) GetJobsConfig(ctx context.Context) (r GetJobsConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLobByMap implements getLobByMap operation.
//
// Retrieves a lob of a specific ISN of an field in a Map.
//
// GET /binary/{table}/{field}/{search}
func (UnimplementedHandler) GetLobByMap(ctx context.Context, params GetLobByMapParams) (r GetLobByMapRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLoginSession implements getLoginSession operation.
//
// Login receiving JWT.
//
// GET /login
func (UnimplementedHandler) GetLoginSession(ctx context.Context) (r GetLoginSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMapMetadata implements getMapMetadata operation.
//
// Retrieves metadata of a Map definition.
//
// GET /rest/metadata/view/{table}
func (UnimplementedHandler) GetMapMetadata(ctx context.Context, params GetMapMetadataParams) (r GetMapMetadataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMapRecordsFields implements getMapRecordsFields operation.
//
// Retrieves a field of a specific ISN of a Map definition.
//
// GET /rest/view/{table}/{fields}/{search}
func (UnimplementedHandler) GetMapRecordsFields(ctx context.Context, params GetMapRecordsFieldsParams) (r GetMapRecordsFieldsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMaps implements getMaps operation.
//
// Retrieves a list of available views.
//
// GET /rest/view
func (UnimplementedHandler) GetMaps(ctx context.Context) (r GetMapsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPermission implements getPermission operation.
//
// List RBAC assignments permission.
//
// GET /rest/database/{table}/permission
func (UnimplementedHandler) GetPermission(ctx context.Context, params GetPermissionParams) (r GetPermissionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersion implements getVersion operation.
//
// Retrieves the current version.
//
// GET /version
func (UnimplementedHandler) GetVersion(ctx context.Context) (r GetVersionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVideo implements getVideo operation.
//
// Retrieves a video stream of a specific ISN of a Map definition.
//
// GET /video/{table}/{field}/{search}
func (UnimplementedHandler) GetVideo(ctx context.Context, params GetVideoParams) (r GetVideoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetViews implements getViews operation.
//
// Defines the current views.
//
// GET /config/views
func (UnimplementedHandler) GetViews(ctx context.Context) (r GetViewsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InsertMapFileRecords implements insertMapFileRecords operation.
//
// Store send records into Map definition.
//
// POST /rest/view
func (UnimplementedHandler) InsertMapFileRecords(ctx context.Context, req OptInsertMapFileRecordsReq) (r InsertMapFileRecordsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InsertRecord implements insertRecord operation.
//
// Insert given record.
//
// POST /rest/view/{table}
func (UnimplementedHandler) InsertRecord(ctx context.Context, req OptInsertRecordReq, params InsertRecordParams) (r InsertRecordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListModelling implements listModelling operation.
//
// Retrieves all fields of an file.
//
// GET /rest/map
func (UnimplementedHandler) ListModelling(ctx context.Context) (r ListModellingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListRBACResource implements listRBACResource operation.
//
// Add permission role.
//
// GET /rest/database/{table}/permission/{resource}
func (UnimplementedHandler) ListRBACResource(ctx context.Context, params ListRBACResourceParams) (r ListRBACResourceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListTables implements listTables operation.
//
// Retrieves all tables of databases.
//
// GET /rest/tables
func (UnimplementedHandler) ListTables(ctx context.Context) (r ListTablesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LoginSession implements loginSession operation.
//
// Login receiving JWT.
//
// PUT /login
func (UnimplementedHandler) LoginSession(ctx context.Context) (r LoginSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostDatabase implements postDatabase operation.
//
// Create a new database, the input need to be JSON. A structure level parameter indicate version to
// be used.
//
// POST /rest/database
func (UnimplementedHandler) PostDatabase(ctx context.Context, req *Database) (r PostDatabaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PostJob implements postJob operation.
//
// Create a new Job database.
//
// POST /rest/tasks
func (UnimplementedHandler) PostJob(ctx context.Context, req PostJobReq) (r PostJobRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PushLoginSession implements pushLoginSession operation.
//
// Login receiving JWT.
//
// POST /login
func (UnimplementedHandler) PushLoginSession(ctx context.Context) (r PushLoginSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PutDatabaseResource implements putDatabaseResource operation.
//
// Change resource of the database.
//
// PUT /rest/database/{table_operation}
func (UnimplementedHandler) PutDatabaseResource(ctx context.Context, params PutDatabaseResourceParams) (r PutDatabaseResourceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemovePermission implements removePermission operation.
//
// Add RBAC role.
//
// DELETE /rest/database/{table}/permission
func (UnimplementedHandler) RemovePermission(ctx context.Context, params RemovePermissionParams) (r RemovePermissionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveSessionCompat implements removeSessionCompat operation.
//
// Remove the session.
//
// GET /logoff
func (UnimplementedHandler) RemoveSessionCompat(ctx context.Context) (r RemoveSessionCompatRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchModelling implements searchModelling operation.
//
// Retrieves all fields of an file.
//
// GET /rest/map/{path}
func (UnimplementedHandler) SearchModelling(ctx context.Context, params SearchModellingParams) (r SearchModellingRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchRecordsFields implements searchRecordsFields operation.
//
// Query a record with a given SQL query.
//
// GET /rest/view/{table}/{search}
func (UnimplementedHandler) SearchRecordsFields(ctx context.Context, params SearchRecordsFieldsParams) (r SearchRecordsFieldsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchTable implements searchTable operation.
//
// Retrieves all fields of an file.
//
// GET /rest/tables/{table}/{fields}/{search}
func (UnimplementedHandler) SearchTable(ctx context.Context, params SearchTableParams) (r SearchTableRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetConfig implements setConfig operation.
//
// Store configuration.
//
// PUT /config
func (UnimplementedHandler) SetConfig(ctx context.Context, req SetConfigReq) (r SetConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetJobsConfig implements setJobsConfig operation.
//
// Set the ADADATADIR.
//
// PUT /config/jobs
func (UnimplementedHandler) SetJobsConfig(ctx context.Context, req OptJobStore) (r SetJobsConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ShutdownServer implements shutdownServer operation.
//
// Init shutdown procedure.
//
// PUT /rest/shutdown/{hash}
func (UnimplementedHandler) ShutdownServer(ctx context.Context, params ShutdownServerParams) (r ShutdownServerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StoreConfig implements storeConfig operation.
//
// Store configuration.
//
// POST /config
func (UnimplementedHandler) StoreConfig(ctx context.Context) (r StoreConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TriggerJob implements triggerJob operation.
//
// Trigger a job.
//
// PUT /rest/tasks/{jobName}
func (UnimplementedHandler) TriggerJob(ctx context.Context, params TriggerJobParams) (r TriggerJobRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateLobByMap implements updateLobByMap operation.
//
// Set a lob at a specific ISN of an field in a Map.
//
// PUT /binary/{table}/{field}/{search}
func (UnimplementedHandler) UpdateLobByMap(ctx context.Context, req UpdateLobByMapReq, params UpdateLobByMapParams) (r UpdateLobByMapRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateRecordsByFields implements updateRecordsByFields operation.
//
// Update a record dependent on field(s) of a specific table.
//
// PUT /rest/view/{table}/{search}
func (UnimplementedHandler) UpdateRecordsByFields(ctx context.Context, req OptUpdateRecordsByFieldsReq, params UpdateRecordsByFieldsParams) (r UpdateRecordsByFieldsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadFile implements uploadFile operation.
//
// Upload a new file to the given location.
//
// POST /rest/file/{path}
func (UnimplementedHandler) UploadFile(ctx context.Context, req *UploadFileReq, params UploadFileParams) (r UploadFileRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
