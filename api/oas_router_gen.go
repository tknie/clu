// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "binary/"
				origElem := elem
				if l := len("binary/"); len(elem) >= l && elem[0:l] == "binary/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "table"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "field"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "search"
						// Leaf parameter
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetLobByMapRequest([3]string{
									args[0],
									args[1],
									args[2],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateLobByMapRequest([3]string{
									args[0],
									args[1],
									args[2],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "config"
				origElem := elem
				if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetConfigRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleStoreConfigRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleSetConfigRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'j': // Prefix: "jobs"
						origElem := elem
						if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetJobsConfigRequest([0]string{}, elemIsEscaped, w, r)
							case "PUT":
								s.handleSetJobsConfigRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}

						elem = origElem
					case 'v': // Prefix: "views"
						origElem := elem
						if l := len("views"); len(elem) >= l && elem[0:l] == "views" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteViewRequest([0]string{}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetViewsRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleAddViewRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "image/"
				origElem := elem
				if l := len("image/"); len(elem) >= l && elem[0:l] == "image/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "table"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "field"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "search"
						// Leaf parameter
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetImageRequest([3]string{
									args[0],
									args[1],
									args[2],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "log"
				origElem := elem
				if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "in"
					origElem := elem
					if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetLoginSessionRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePushLoginSessionRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleLoginSessionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST,PUT")
						}

						return
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "ff"
						origElem := elem
						if l := len("ff"); len(elem) >= l && elem[0:l] == "ff" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleRemoveSessionCompatRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'u': // Prefix: "ut"
						origElem := elem
						if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleLogoutSessionCompatRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "rest/"
				origElem := elem
				if l := len("rest/"); len(elem) >= l && elem[0:l] == "rest/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "batch/"
					origElem := elem
					if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "table"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleBatchSelectRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleBatchQueryRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "query"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleBatchParameterQueryRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'd': // Prefix: "database"
					origElem := elem
					if l := len("database"); len(elem) >= l && elem[0:l] == "database" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetDatabasesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePostDatabaseRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "connection"
								origElem := elem
								if l := len("connection"); len(elem) >= l && elem[0:l] == "connection" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDisconnectTCPRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetConnectionsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET")
									}

									return
								}

								elem = origElem
							case 'p': // Prefix: "permission"
								origElem := elem
								if l := len("permission"); len(elem) >= l && elem[0:l] == "permission" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleRemovePermissionRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetPermissionRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleAdaptPermissionRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "sessions"
								origElem := elem
								if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetDatabaseSessionsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "extend/"
					origElem := elem
					if l := len("extend/"); len(elem) >= l && elem[0:l] == "extend/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteExtendRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleCallExtendRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleCallPostExtendRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleTriggerExtendRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST,PUT")
						}

						return
					}

					elem = origElem
				case 'f': // Prefix: "file/"
					origElem := elem
					if l := len("file/"); len(elem) >= l && elem[0:l] == "file/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "browse"
						origElem := elem
						if l := len("browse"); len(elem) >= l && elem[0:l] == "browse" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleBrowseListRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleBrowseLocationRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "path"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteFileLocationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleDownloadFileRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadFileRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleCreateDirectoryRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST,PUT")
						}

						return
					}

					elem = origElem
				case 'm': // Prefix: "m"
					origElem := elem
					if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ap"
						origElem := elem
						if l := len("ap"); len(elem) >= l && elem[0:l] == "ap" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListModellingRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleSearchModellingRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "etadata/view/"
						origElem := elem
						if l := len("etadata/view/"); len(elem) >= l && elem[0:l] == "etadata/view/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetMapMetadataRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "shutdown/"
					origElem := elem
					if l := len("shutdown/"); len(elem) >= l && elem[0:l] == "shutdown/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "hash"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "PUT":
							s.handleShutdownServerRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PUT")
						}

						return
					}

					elem = origElem
				case 't': // Prefix: "tables"
					origElem := elem
					if l := len("tables"); len(elem) >= l && elem[0:l] == "tables" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListTablesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "fields"
								origElem := elem
								if l := len("fields"); len(elem) >= l && elem[0:l] == "fields" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetFieldsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}
							// Param: "fields"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "search"
								// Leaf parameter
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSearchTableRequest([3]string{
											args[0],
											args[1],
											args[2],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "user"
					origElem := elem
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetUserInfoRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'v': // Prefix: "view"
					origElem := elem
					if l := len("view"); len(elem) >= l && elem[0:l] == "view" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetMapsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleInsertMapFileRecordsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleInsertRecordRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "search"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteRecordsSearchedRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleSearchRecordsFieldsRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateRecordsByFieldsRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "search"
								// Leaf parameter
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetMapRecordsFieldsRequest([3]string{
											args[0],
											args[1],
											args[2],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tasks"
				origElem := elem
				if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetJobsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handlePostJobRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "results"
						origElem := elem
						if l := len("results"); len(elem) >= l && elem[0:l] == "results" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetJobExecutionResultRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "jobName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetJobFullInfoRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleTriggerJobRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "jobId"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteJobResultRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetJobResultRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersion"
					origElem := elem
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetVersionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'i': // Prefix: "ideo/"
					origElem := elem
					if l := len("ideo/"); len(elem) >= l && elem[0:l] == "ideo/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "table"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "field"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "search"
							// Leaf parameter
							args[2] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetVideoRequest([3]string{
										args[0],
										args[1],
										args[2],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "binary/"
				origElem := elem
				if l := len("binary/"); len(elem) >= l && elem[0:l] == "binary/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "table"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "field"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "search"
						// Leaf parameter
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetLobByMapOperation
								r.summary = ""
								r.operationID = "getLobByMap"
								r.pathPattern = "/binary/{table}/{field}/{search}"
								r.args = args
								r.count = 3
								return r, true
							case "PUT":
								r.name = UpdateLobByMapOperation
								r.summary = ""
								r.operationID = "updateLobByMap"
								r.pathPattern = "/binary/{table}/{field}/{search}"
								r.args = args
								r.count = 3
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "config"
				origElem := elem
				if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetConfigOperation
						r.summary = ""
						r.operationID = "getConfig"
						r.pathPattern = "/config"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = StoreConfigOperation
						r.summary = ""
						r.operationID = "storeConfig"
						r.pathPattern = "/config"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = SetConfigOperation
						r.summary = ""
						r.operationID = "setConfig"
						r.pathPattern = "/config"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'j': // Prefix: "jobs"
						origElem := elem
						if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetJobsConfigOperation
								r.summary = ""
								r.operationID = "getJobsConfig"
								r.pathPattern = "/config/jobs"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								r.name = SetJobsConfigOperation
								r.summary = ""
								r.operationID = "setJobsConfig"
								r.pathPattern = "/config/jobs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'v': // Prefix: "views"
						origElem := elem
						if l := len("views"); len(elem) >= l && elem[0:l] == "views" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteViewOperation
								r.summary = ""
								r.operationID = "deleteView"
								r.pathPattern = "/config/views"
								r.args = args
								r.count = 0
								return r, true
							case "GET":
								r.name = GetViewsOperation
								r.summary = ""
								r.operationID = "getViews"
								r.pathPattern = "/config/views"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = AddViewOperation
								r.summary = ""
								r.operationID = "addView"
								r.pathPattern = "/config/views"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "image/"
				origElem := elem
				if l := len("image/"); len(elem) >= l && elem[0:l] == "image/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "table"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "field"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "search"
						// Leaf parameter
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetImageOperation
								r.summary = ""
								r.operationID = "getImage"
								r.pathPattern = "/image/{table}/{field}/{search}"
								r.args = args
								r.count = 3
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "log"
				origElem := elem
				if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "in"
					origElem := elem
					if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetLoginSessionOperation
							r.summary = ""
							r.operationID = "getLoginSession"
							r.pathPattern = "/login"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PushLoginSessionOperation
							r.summary = ""
							r.operationID = "pushLoginSession"
							r.pathPattern = "/login"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = LoginSessionOperation
							r.summary = ""
							r.operationID = "loginSession"
							r.pathPattern = "/login"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "ff"
						origElem := elem
						if l := len("ff"); len(elem) >= l && elem[0:l] == "ff" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = RemoveSessionCompatOperation
								r.summary = ""
								r.operationID = "removeSessionCompat"
								r.pathPattern = "/logoff"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'u': // Prefix: "ut"
						origElem := elem
						if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "PUT":
								r.name = LogoutSessionCompatOperation
								r.summary = ""
								r.operationID = "logoutSessionCompat"
								r.pathPattern = "/logout"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "rest/"
				origElem := elem
				if l := len("rest/"); len(elem) >= l && elem[0:l] == "rest/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "batch/"
					origElem := elem
					if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "table"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = BatchSelectOperation
							r.summary = ""
							r.operationID = "batchSelect"
							r.pathPattern = "/rest/batch/{table}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = BatchQueryOperation
							r.summary = ""
							r.operationID = "batchQuery"
							r.pathPattern = "/rest/batch/{table}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "query"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = BatchParameterQueryOperation
								r.summary = ""
								r.operationID = "batchParameterQuery"
								r.pathPattern = "/rest/batch/{table}/{query}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'd': // Prefix: "database"
					origElem := elem
					if l := len("database"); len(elem) >= l && elem[0:l] == "database" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetDatabasesOperation
							r.summary = ""
							r.operationID = "getDatabases"
							r.pathPattern = "/rest/database"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PostDatabaseOperation
							r.summary = ""
							r.operationID = "postDatabase"
							r.pathPattern = "/rest/database"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "connection"
								origElem := elem
								if l := len("connection"); len(elem) >= l && elem[0:l] == "connection" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = DisconnectTCPOperation
										r.summary = ""
										r.operationID = "disconnectTCP"
										r.pathPattern = "/rest/database/{table}/connection"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetConnectionsOperation
										r.summary = ""
										r.operationID = "getConnections"
										r.pathPattern = "/rest/database/{table}/connection"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'p': // Prefix: "permission"
								origElem := elem
								if l := len("permission"); len(elem) >= l && elem[0:l] == "permission" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = RemovePermissionOperation
										r.summary = ""
										r.operationID = "removePermission"
										r.pathPattern = "/rest/database/{table}/permission"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetPermissionOperation
										r.summary = ""
										r.operationID = "getPermission"
										r.pathPattern = "/rest/database/{table}/permission"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = AdaptPermissionOperation
										r.summary = ""
										r.operationID = "adaptPermission"
										r.pathPattern = "/rest/database/{table}/permission"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "sessions"
								origElem := elem
								if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetDatabaseSessionsOperation
										r.summary = ""
										r.operationID = "getDatabaseSessions"
										r.pathPattern = "/rest/database/{table}/sessions"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "extend/"
					origElem := elem
					if l := len("extend/"); len(elem) >= l && elem[0:l] == "extend/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteExtendOperation
							r.summary = ""
							r.operationID = "deleteExtend"
							r.pathPattern = "/rest/extend/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = CallExtendOperation
							r.summary = ""
							r.operationID = "callExtend"
							r.pathPattern = "/rest/extend/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = CallPostExtendOperation
							r.summary = ""
							r.operationID = "callPostExtend"
							r.pathPattern = "/rest/extend/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = TriggerExtendOperation
							r.summary = ""
							r.operationID = "triggerExtend"
							r.pathPattern = "/rest/extend/{path}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'f': // Prefix: "file/"
					origElem := elem
					if l := len("file/"); len(elem) >= l && elem[0:l] == "file/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "browse"
						origElem := elem
						if l := len("browse"); len(elem) >= l && elem[0:l] == "browse" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = BrowseListOperation
								r.summary = ""
								r.operationID = "browseList"
								r.pathPattern = "/rest/file/browse"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = BrowseLocationOperation
									r.summary = ""
									r.operationID = "browseLocation"
									r.pathPattern = "/rest/file/browse/{path}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "path"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteFileLocationOperation
							r.summary = ""
							r.operationID = "deleteFileLocation"
							r.pathPattern = "/rest/file/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = DownloadFileOperation
							r.summary = ""
							r.operationID = "downloadFile"
							r.pathPattern = "/rest/file/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = UploadFileOperation
							r.summary = ""
							r.operationID = "uploadFile"
							r.pathPattern = "/rest/file/{path}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = CreateDirectoryOperation
							r.summary = ""
							r.operationID = "createDirectory"
							r.pathPattern = "/rest/file/{path}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'm': // Prefix: "m"
					origElem := elem
					if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ap"
						origElem := elem
						if l := len("ap"); len(elem) >= l && elem[0:l] == "ap" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListModellingOperation
								r.summary = ""
								r.operationID = "listModelling"
								r.pathPattern = "/rest/map"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "path"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = SearchModellingOperation
									r.summary = ""
									r.operationID = "searchModelling"
									r.pathPattern = "/rest/map/{path}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "etadata/view/"
						origElem := elem
						if l := len("etadata/view/"); len(elem) >= l && elem[0:l] == "etadata/view/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetMapMetadataOperation
								r.summary = ""
								r.operationID = "getMapMetadata"
								r.pathPattern = "/rest/metadata/view/{table}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "shutdown/"
					origElem := elem
					if l := len("shutdown/"); len(elem) >= l && elem[0:l] == "shutdown/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "hash"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "PUT":
							r.name = ShutdownServerOperation
							r.summary = ""
							r.operationID = "shutdownServer"
							r.pathPattern = "/rest/shutdown/{hash}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 't': // Prefix: "tables"
					origElem := elem
					if l := len("tables"); len(elem) >= l && elem[0:l] == "tables" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = ListTablesOperation
							r.summary = ""
							r.operationID = "listTables"
							r.pathPattern = "/rest/tables"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "fields"
								origElem := elem
								if l := len("fields"); len(elem) >= l && elem[0:l] == "fields" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetFieldsOperation
										r.summary = ""
										r.operationID = "getFields"
										r.pathPattern = "/rest/tables/{table}/fields"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}
							// Param: "fields"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "search"
								// Leaf parameter
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = SearchTableOperation
										r.summary = ""
										r.operationID = "searchTable"
										r.pathPattern = "/rest/tables/{table}/{fields}/{search}"
										r.args = args
										r.count = 3
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "user"
					origElem := elem
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetUserInfoOperation
							r.summary = ""
							r.operationID = "getUserInfo"
							r.pathPattern = "/rest/user"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'v': // Prefix: "view"
					origElem := elem
					if l := len("view"); len(elem) >= l && elem[0:l] == "view" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetMapsOperation
							r.summary = ""
							r.operationID = "getMaps"
							r.pathPattern = "/rest/view"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = InsertMapFileRecordsOperation
							r.summary = ""
							r.operationID = "insertMapFileRecords"
							r.pathPattern = "/rest/view"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "table"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = InsertRecordOperation
								r.summary = ""
								r.operationID = "insertRecord"
								r.pathPattern = "/rest/view/{table}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "search"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = DeleteRecordsSearchedOperation
									r.summary = ""
									r.operationID = "deleteRecordsSearched"
									r.pathPattern = "/rest/view/{table}/{search}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = SearchRecordsFieldsOperation
									r.summary = ""
									r.operationID = "searchRecordsFields"
									r.pathPattern = "/rest/view/{table}/{search}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateRecordsByFieldsOperation
									r.summary = ""
									r.operationID = "updateRecordsByFields"
									r.pathPattern = "/rest/view/{table}/{search}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "search"
								// Leaf parameter
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetMapRecordsFieldsOperation
										r.summary = ""
										r.operationID = "getMapRecordsFields"
										r.pathPattern = "/rest/view/{table}/{fields}/{search}"
										r.args = args
										r.count = 3
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tasks"
				origElem := elem
				if l := len("tasks"); len(elem) >= l && elem[0:l] == "tasks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetJobsOperation
						r.summary = ""
						r.operationID = "getJobs"
						r.pathPattern = "/tasks"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = PostJobOperation
						r.summary = ""
						r.operationID = "postJob"
						r.pathPattern = "/tasks"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'r': // Prefix: "results"
						origElem := elem
						if l := len("results"); len(elem) >= l && elem[0:l] == "results" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetJobExecutionResultOperation
								r.summary = ""
								r.operationID = "getJobExecutionResult"
								r.pathPattern = "/tasks/results"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "jobName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetJobFullInfoOperation
							r.summary = ""
							r.operationID = "getJobFullInfo"
							r.pathPattern = "/tasks/{jobName}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = TriggerJobOperation
							r.summary = ""
							r.operationID = "triggerJob"
							r.pathPattern = "/tasks/{jobName}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "jobId"
						// Leaf parameter
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteJobResultOperation
								r.summary = ""
								r.operationID = "deleteJobResult"
								r.pathPattern = "/tasks/{jobName}/{jobId}"
								r.args = args
								r.count = 2
								return r, true
							case "GET":
								r.name = GetJobResultOperation
								r.summary = ""
								r.operationID = "getJobResult"
								r.pathPattern = "/tasks/{jobName}/{jobId}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "v"
				origElem := elem
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersion"
					origElem := elem
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetVersionOperation
							r.summary = ""
							r.operationID = "getVersion"
							r.pathPattern = "/version"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'i': // Prefix: "ideo/"
					origElem := elem
					if l := len("ideo/"); len(elem) >= l && elem[0:l] == "ideo/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "table"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "field"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "search"
							// Leaf parameter
							args[2] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetVideoOperation
									r.summary = ""
									r.operationID = "getVideo"
									r.pathPattern = "/video/{table}/{field}/{search}"
									r.args = args
									r.count = 3
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
